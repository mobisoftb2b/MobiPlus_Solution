(function ($) { $.fn.layout = function (opts) { function setPinState(a, b, c) { var d = a.attr("pin"); if (d && c == (d == "down")) return; var e = options[b].buttonClass, f = e + "-pin", g = f + "-" + b, h = f + "-up", i = g + "-up", j = f + "-down", k = g + "-down"; a.attr("pin", c ? "down" : "up").attr("title", c ? "Un-Pin" : "Pin").removeClass(c ? h : j).removeClass(c ? i : k).addClass(c ? j : h).addClass(c ? k : i) } function syncPinBtns(a, b) { $.each(c[a].pins, function (c, d) { setPinState($(d), a, b) }) } function addPinBtn(a, b) { var d = getBtn(a, b, "pin"); if (d) { var e = state[b]; d.click(function (a) { setPinState($(this), b, e.isSliding || e.isClosed); if (e.isSliding || e.isClosed) open(b); else close(b); a.stopPropagation() }); setPinState(d, b, !e.isClosed && !e.isSliding); c[b].pins.push(a) } } function addCloseBtn(a, b) { var c = getBtn(a, b, "close"); if (c) c.attr("title", "Close").click(function (a) { close(b); a.stopPropagation() }) } function addOpenBtn(a, b) { var c = getBtn(a, b, "open"); if (c) c.attr("title", "Open").click(function (a) { open(b); a.stopPropagation() }) } function addToggleBtn(a, b) { var c = getBtn(a, b, "toggle"); if (c) c.attr("title", state[b].isClosed ? "Open" : "Close").click(function (a) { toggle(b); a.stopPropagation() }) } function getBtn(a, b, d) { var e = $(a), f = "Error Adding Button \n\nInvalid "; if (!e.length) alert(f + "selector: " + a); else if (c.borderPanes.indexOf(b) == -1) alert(f + "pane: " + b); else { var g = options[b].buttonClass + "-" + d; e.addClass(g + " " + g + "-" + b); return e } return false } function resetOverflow(a) { if (this && this.tagName) a = this; var b; if (typeof a == "string") b = $Ps[a]; else { if ($(a).hasClass("ui-layout-pane")) b = $(a); else b = $(a).parents("div[pane]:first") } if (!b.length) return; var d = b.attr("pane"), e = state[d], f = e.cssSaved || {}; if (!e.isSliding && !e.isResizing) b.css("zIndex", c.zIndex.pane_normal); b.css(f); e.cssSaved = false } function allowOverflow(a) { if (this && this.tagName) a = this; var b; if (typeof a == "string") b = $Ps[a]; else { if ($(a).attr("pane")) b = $(a); else b = $(a).parents("div[pane]:first") } if (!b.length) return; var d = b.attr("pane"), e = state[d]; if (e.cssSaved) resetOverflow(d); if (e.isSliding || e.isResizing || e.isClosed) { e.cssSaved = false; return } var f = { zIndex: c.zIndex.pane_normal + 1 }, g = {}, h = b.css("overflow"), i = b.css("overflowX"), j = b.css("overflowY"); if (h != "visible") { g.overflow = h; f.overflow = "visible" } if (i && i != "visible" && i != "auto") { g.overflowX = i; f.overflowX = "visible" } if (j && j != "visible" && j != "auto") { g.overflowY = i; f.overflowY = "visible" } e.cssSaved = g; b.css(f); $.each(c.allPanes.split(","), function (a, b) { if (b != d) resetOverflow(b) }) } function keyDown(a) { if (!a) return true; var b = a.keyCode; if (b < 33) return true; var d = { 38: "north", 40: "south", 37: "west", 39: "east" }, e = b >= 37 && b <= 40, f = a.altKey, g = a.shiftKey, h = a.ctrlKey, i = false, j, k, l, m, n; if (!h && !g) return true; else if (e && options[d[b]].enableCursorHotkey) i = d[b]; else $.each(c.borderPanes.split(","), function (a, c) { k = options[c]; l = k.customHotkey; m = k.customHotkeyModifier; if (g && m == "SHIFT" || h && m == "CTRL" || h && g) { if (l && b == (isNaN(l) || l <= 9 ? l.toUpperCase().charCodeAt(0) : l)) { i = c; return false } } }); if (!i) return true; k = options[i]; j = state[i]; if (!k.enableCursorHotkey || j.isHidden || !$Ps[i]) return true; n = a.target || a.srcElement; if (n && g && e && (n.tagName == "TEXTAREA" || n.tagName == "INPUT" && (b == 37 || b == 39))) return true; toggle(i); a.stopPropagation(); a.returnValue = false; return false } var prefix = "ui-layout-", defaults = { paneClass: prefix + "pane", resizerClass: prefix + "resizer", togglerClass: prefix + "toggler", togglerInnerClass: prefix + "", buttonClass: prefix + "button", contentSelector: "." + prefix + "content", contentIgnoreSelector: "." + prefix + "ignore" }; var options = { name: "", scrollToBookmarkOnLoad: true, defaults: { applyDefaultStyles: false, closable: true, resizable: true, slidable: true, contentSelector: defaults.contentSelector, contentIgnoreSelector: defaults.contentIgnoreSelector, paneClass: defaults.paneClass, resizerClass: defaults.resizerClass, togglerClass: defaults.togglerClass, buttonClass: defaults.buttonClass, resizerDragOpacity: 1, maskIframesOnResize: true, minSize: 0, maxSize: 0, spacing_open: 6, spacing_closed: 6, togglerLength_open: 50, togglerLength_closed: 50, togglerAlign_open: "center", togglerAlign_closed: "center", togglerTip_open: "Close", togglerTip_closed: "Open", resizerTip: "Resize", sliderTip: "Slide Open", sliderCursor: "pointer", slideTrigger_open: "click", slideTrigger_close: "mouseout", hideTogglerOnSlide: false, togglerContent_open: "", togglerContent_closed: "", showOverflowOnHover: false, enableCursorHotkey: true, customHotkeyModifier: "SHIFT", fxName: "slide", fxSpeed: null, fxSettings: {}, initClosed: false, initHidden: false }, north: { paneSelector: "." + prefix + "north", size: "auto", resizerCursor: "n-resize" }, south: { paneSelector: "." + prefix + "south", size: "auto", resizerCursor: "s-resize" }, east: { paneSelector: "." + prefix + "east", size: 200, resizerCursor: "e-resize" }, west: { paneSelector: "." + prefix + "west", size: 200, resizerCursor: "w-resize" }, center: { paneSelector: "." + prefix + "center"} }; var effects = { slide: { all: { duration: "fast" }, north: { direction: "up" }, south: { direction: "down" }, east: { direction: "right" }, west: { direction: "left"} }, drop: { all: { duration: "slow" }, north: { direction: "up" }, south: { direction: "down" }, east: { direction: "right" }, west: { direction: "left"} }, scale: { all: { duration: "fast"}} }; var config = { allPanes: "north,south,east,west,center", borderPanes: "north,south,east,west", zIndex: { resizer_normal: 1, pane_normal: 2, mask: 4, sliding: 100, resizing: 1e4, animation: 1e4 }, resizers: { cssReq: { position: "absolute", padding: 0, margin: 0, fontSize: "1px", textAlign: "left", overflow: "hidden", zIndex: 1 }, cssDef: { background: "#DDD", border: "none"} }, togglers: { cssReq: { position: "absolute", display: "block", padding: 0, margin: 0, overflow: "hidden", textAlign: "center", fontSize: "1px", cursor: "pointer", zIndex: 1 }, cssDef: { background: "#AAA"} }, content: { cssReq: { overflow: "auto" }, cssDef: {} }, defaults: { cssReq: { position: "absolute", margin: 0, zIndex: 2 }, cssDef: { padding: "10px", background: "#FFF", border: "1px solid #BBB", overflow: "auto"} }, north: { edge: "top", sizeType: "height", dir: "horz", cssReq: { top: 0, bottom: "auto", left: 0, right: 0, width: "auto"} }, south: { edge: "bottom", sizeType: "height", dir: "horz", cssReq: { top: "auto", bottom: 0, left: 0, right: 0, width: "auto"} }, east: { edge: "right", sizeType: "width", dir: "vert", cssReq: { left: "auto", right: 0, top: "auto", bottom: "auto", height: "auto"} }, west: { edge: "left", sizeType: "width", dir: "vert", cssReq: { left: 0, right: "auto", top: "auto", bottom: "auto", height: "auto"} }, center: { dir: "center", cssReq: { left: "auto", right: "auto", top: "auto", bottom: "auto", height: "auto", width: "auto"}} }; var state = { id: Math.floor(Math.random() * 1e4), container: {}, north: {}, south: {}, east: {}, west: {}, center: {} }; var altEdge = { top: "bottom", bottom: "top", left: "right", right: "left" }, altSide = { north: "south", south: "north", east: "west", west: "east" }; var isStr = function (a) { if (typeof a == "string") return true; else if (typeof a == "object") { try { var b = a.constructor.toString().match(/string/i); return b !== null } catch (c) { } } return false }; var str = function (a) { if (typeof a == "string" || isStr(a)) return $.trim(a); else return a }; var min = function (a, b) { return Math.min(a, b) }; var max = function (a, b) { return Math.max(a, b) }; var transformData = function (b) { var c = { defaults: { fxSettings: {} }, north: { fxSettings: {} }, south: { fxSettings: {} }, east: { fxSettings: {} }, west: { fxSettings: {} }, center: { fxSettings: {}} }; b = b || {}; if (b.effects || b.defaults || b.north || b.south || b.west || b.east || b.center) c = $.extend(c, b); else $.each(b, function (b, d) { a = b.split("__"); c[a[1] ? a[0] : "defaults"][a[1] ? a[1] : a[0]] = d }); return c }; var setFlowCallback = function (a, b, d) { function h(a, d) { f = c[a]; if (!f.doCallback) { f.doCallback = true; f.callback = e } else { cpPane = f.callback.split(",")[1]; if (cpPane != a && cpPane != b) h(cpPane, true) } } var e = a + "," + b + "," + (d ? 1 : 0), f, g; $.each(c.borderPanes.split(","), function (a, b) { if (c[b].isMoving) { h(b); return false } }) }; var execFlowCallback = function (a) { var b = c[a]; c.isLayoutBusy = false; delete b.isMoving; if (!b.doCallback || !b.callback) return; b.doCallback = false; var d = b.callback.split(","), e = d[2] > 0 ? true : false; if (d[0] == "open") open(d[1], e); else if (d[0] == "close") close(d[1], e); if (!b.doCallback) b.callback = null }; var execUserCallback = function (pane, v_fn) { if (!v_fn) return; var fn; try { if (typeof v_fn == "function") fn = v_fn; else if (typeof v_fn != "string") return; else if (v_fn.indexOf(",") > 0) { var args = v_fn.split(","), fn = eval(args[0]); if (typeof fn == "function" && args.length > 1) return fn(args[1]) } else fn = eval(v_fn); if (typeof fn == "function") return fn(pane, $Ps[pane], $.extend({}, state[pane]), $.extend({}, options[pane]), options.name) } catch (ex) { } }; var cssNum = function (a, b) { var c = 0, d = false, e = ""; if (!$.browser.msie) { if ($.curCSS(a[0], "display", true) == "none") { d = true; e = $.curCSS(a[0], "visibility", true); a.css({ display: "block", visibility: "hidden" }) } } c = parseInt($.curCSS(a[0], b, true), 10) || 0; if (d) { a.css({ display: "none" }); if (e && e != "hidden") a.css({ visibility: e }) } return c }; var cssW = function (a, b) { var c; if (isStr(a)) { a = str(a); c = $Ps[a] } else c = $(a); if (b <= 0) return 0; else if (!(b > 0)) b = isStr(a) ? getPaneSize(a) : c.outerWidth(); if (!$.boxModel) return b; else return b - cssNum(c, "paddingLeft") - cssNum(c, "paddingRight") - ($.curCSS(c[0], "borderLeftStyle", true) == "none" ? 0 : cssNum(c, "borderLeftWidth")) - ($.curCSS(c[0], "borderRightStyle", true) == "none" ? 0 : cssNum(c, "borderRightWidth")) }; var cssH = function (a, b) { var c; if (isStr(a)) { a = str(a); c = $Ps[a] } else c = $(a); if (b <= 0) return 0; else if (!(b > 0)) b = isStr(a) ? getPaneSize(a) : c.outerHeight(); if (!$.boxModel) return b; else return b - cssNum(c, "paddingTop") - cssNum(c, "paddingBottom") - ($.curCSS(c[0], "borderTopStyle", true) == "none" ? 0 : cssNum(c, "borderTopWidth")) - ($.curCSS(c[0], "borderBottomStyle", true) == "none" ? 0 : cssNum(c, "borderBottomWidth")) }; var cssSize = function (a, b) { if (c[a].dir == "horz") return cssH(a, b); else return cssW(a, b) }; var getPaneSize = function (a, b) { var d = $Ps[a], e = options[a], f = state[a], g = b ? e.spacing_open : 0, h = b ? e.spacing_closed : 0; if (!d || f.isHidden) return 0; else if (f.isClosed || f.isSliding && b) return h; else if (c[a].dir == "horz") return d.outerHeight() + g; else return d.outerWidth() + g }; var setPaneMinMaxSizes = function (a) { var b = cDims, d = c[a].edge, e = c[a].dir, f = options[a], g = state[a], h = $Ps[a], i = $Ps[altSide[a]], j = f.spacing_open, k = options[altSide[a]].spacing_open, l = !i ? 0 : e == "horz" ? i.outerHeight() : i.outerWidth(), m = e == "horz" ? b.innerHeight : b.innerWidth, n = m - j - l - k, o = g.minSize || 0, p = Math.min(g.maxSize || 9999, n), q, r; switch (a) { case "north": q = b.offsetTop + o; r = b.offsetTop + p; break; case "west": q = b.offsetLeft + o; r = b.offsetLeft + p; break; case "south": q = b.offsetTop + b.innerHeight - p; r = b.offsetTop + b.innerHeight - o; break; case "east": q = b.offsetLeft + b.innerWidth - p; r = b.offsetLeft + b.innerWidth - o; break } $.extend(g, { minSize: o, maxSize: p, minPosition: q, maxPosition: r }) }; var getPaneDims = function () { var d = { top: getPaneSize("north", true), bottom: getPaneSize("south", true), left: getPaneSize("west", true), right: getPaneSize("east", true), width: 0, height: 0 }; with (d) { width = cDims.innerWidth - left - right; height = cDims.innerHeight - bottom - top; top += cDims.top; bottom += cDims.bottom; left += cDims.left; right += cDims.right } return d }; var getElemDims = function (a) { var b = {}, c, d, e; $.each("Left,Right,Top,Bottom".split(","), function () { c = str(this); d = b["border" + c] = cssNum(a, "border" + c + "Width"); e = b["padding" + c] = cssNum(a, "padding" + c); b["offset" + c] = d + e; if (a == $Container) b[c.toLowerCase()] = $.boxModel ? e : 0 }); b.innerWidth = b.outerWidth = a.outerWidth(); b.innerHeight = b.outerHeight = a.outerHeight(); if ($.boxModel) { b.innerWidth -= b.offsetLeft + b.offsetRight; b.innerHeight -= b.offsetTop + b.offsetBottom } return b }; var setTimer = function (a, b, c, d) { var e = window.layout = window.layout || {}, f = e.timers = e.timers || {}, g = "layout_" + state.id + "_" + a + "_" + b; if (f[g]) return; else f[g] = setTimeout(c, d) }; var clearTimer = function (a, b) { var c = window.layout = window.layout || {}, d = c.timers = c.timers || {}, e = "layout_" + state.id + "_" + a + "_" + b; if (d[e]) { clearTimeout(d[e]); delete d[e]; return true } else return false }; var create = function () { initOptions(); initContainer(); initPanes(); initHandles(); initResizable(); sizeContent("all"); if (options.scrollToBookmarkOnLoad) with (self.location) if (hash) replace(hash); initHotkeys(); $(window).resize(function () { var a = "timerLayout_" + state.id; if (window[a]) clearTimeout(window[a]); window[a] = null; if (true || $.browser.msie) window[a] = setTimeout(resizeAll, 100); else resizeAll() }) }; var initContainer = function () { try { if ($Container[0].tagName == "BODY") { $("html").css({ height: "100%", overflow: "hidden" }); $("body").css({ position: "relative", height: "100%", overflow: "hidden", margin: 0, padding: 0, border: "none" }) } else { var a = { overflow: "hidden" }, b = $Container.css("position"), c = $Container.css("height"); if (!$Container.hasClass("ui-layout-pane")) { if (!b || "fixed,absolute,relative".indexOf(b) < 0) a.position = "relative"; if (!c || c == "auto") a.height = "100%" } $Container.css(a) } } catch (d) { } cDims = state.container = getElemDims($Container) }; var initHotkeys = function () { $.each(c.borderPanes.split(","), function (a, b) { var c = options[b]; if (c.enableCursorHotkey || c.customHotkey) { $(document).keydown(keyDown); return false } }) }; var initOptions = function () { opts = transformData(opts); if (opts.effects) { $.extend(effects, opts.effects); delete opts.effects } $.each("name,scrollToBookmarkOnLoad".split(","), function (a, b) { if (opts[b] !== undefined) options[b] = opts[b]; else if (opts.defaults[b] !== undefined) { options[b] = opts.defaults[b]; delete opts.defaults[b] } }); $.each("paneSelector,resizerCursor,customHotkey".split(","), function (a, b) { delete opts.defaults[b] }); $.extend(options.defaults, opts.defaults); c.center = $.extend(true, {}, c.defaults, c.center); $.extend(options.center, opts.center); var a = $.extend(true, {}, options.defaults, opts.defaults, options.center); $.each("paneClass,contentSelector,contentIgnoreSelector,applyDefaultStyles,showOverflowOnHover".split(","), function (b, c) { options.center[c] = a[c] }); var b = options.defaults; $.each(c.borderPanes.split(","), function (a, d) { c[d] = $.extend(true, {}, c.defaults, c[d]); o = options[d] = $.extend(true, {}, options.defaults, options[d], opts.defaults, opts[d]); if (!o.paneClass) o.paneClass = defaults.paneClass; if (!o.resizerClass) o.resizerClass = defaults.resizerClass; if (!o.togglerClass) o.togglerClass = defaults.togglerClass; $.each(["_open", "_close", ""], function (a, c) { var e = "fxName" + c, f = "fxSpeed" + c, g = "fxSettings" + c; o[e] = opts[d][e] || opts[d].fxName || opts.defaults[e] || opts.defaults.fxName || o[e] || o.fxName || b[e] || b.fxName || "none"; var h = o[e]; if (h == "none" || !$.effects || !$.effects[h] || !effects[h] && !o[g] && !o.fxSettings) h = o[e] = "none"; var i = effects[h] || {}, j = i.all || {}, k = i[d] || {}; o[g] = $.extend({}, j, k, b.fxSettings || {}, b[g] || {}, o.fxSettings, o[g], opts.defaults.fxSettings, opts.defaults[g] || {}, opts[d].fxSettings, opts[d][g] || {}); o[f] = opts[d][f] || opts[d].fxSpeed || opts.defaults[f] || opts.defaults.fxSpeed || o[f] || o[g].duration || o.fxSpeed || o.fxSettings.duration || b.fxSpeed || b.fxSettings.duration || k.duration || j.duration || "normal" }) }) }; var initPanes = function () { $.each(c.allPanes.split(","), function () { var a = str(this), b = options[a], d = state[a], e = d.fx, f = c[a].dir, g = b.size == "auto" || isNaN(b.size) ? 0 : b.size, h = b.minSize || 1, i = b.maxSize || 9999, j = b.spacing_open || 0, k = b.paneSelector, l = $.browser.msie && $.browser.version < 7, m = {}, n, o; $Cs[a] = false; if (k.substr(0, 1) === "#") n = $Ps[a] = $Container.find(k + ":first"); else { n = $Ps[a] = $Container.children(k + ":first"); if (!n.length) n = $Ps[a] = $Container.children("form:first").children(k + ":first") } if (!n.length) { $Ps[a] = false; return true } n.attr("pane", a).addClass(b.paneClass + " " + b.paneClass + "-" + a); if (a != "center") { d.isClosed = false; d.isSliding = false; d.isResizing = false; d.isHidden = false; d.noRoom = false; c[a].pins = [] } m = $.extend({ visibility: "visible", display: "block" }, c.defaults.cssReq, c[a].cssReq); if (b.applyDefaultStyles) $.extend(m, c.defaults.cssDef, c[a].cssDef); n.css(m); m = {}; switch (a) { case "north": m.top = cDims.top; m.left = cDims.left; m.right = cDims.right; break; case "south": m.bottom = cDims.bottom; m.left = cDims.left; m.right = cDims.right; break; case "west": m.left = cDims.left; break; case "east": m.right = cDims.right; break; case "center": } if (f == "horz") { if (g === 0 || g == "auto") { n.css({ height: "auto" }); g = n.outerHeight() } g = max(g, h); g = min(g, i); g = min(g, cDims.innerHeight - j); m.height = max(1, cssH(a, g)); d.size = g; d.maxSize = i; d.minSize = max(h, g - m.height + 1); n.css(m) } else if (f == "vert") { if (g === 0 || g == "auto") { n.css({ width: "auto", "float": "left" }); g = n.outerWidth(); n.css({ "float": "none" }) } g = max(g, h); g = min(g, i); g = min(g, cDims.innerWidth - j); m.width = max(1, cssW(a, g)); d.size = g; d.maxSize = i; d.minSize = max(h, g - m.width + 1); n.css(m); sizeMidPanes(a, null, true) } else if (a == "center") { n.css(m); sizeMidPanes("center", null, true) } if (b.initClosed && b.closable) { n.hide().addClass("closed"); d.isClosed = true } else if (b.initHidden || b.initClosed) { hide(a, true); d.isHidden = true } else n.addClass("open"); if (b.showOverflowOnHover) n.hover(allowOverflow, resetOverflow); if (b.contentSelector) { o = $Cs[a] = n.children(b.contentSelector + ":first"); if (!o.length) { $Cs[a] = false; return true } o.css(c.content.cssReq); if (b.applyDefaultStyles) o.css(c.content.cssDef); n.css({ overflow: "hidden" }) } }) }; var initHandles = function () { $.each(c.borderPanes.split(","), function () { var a = str(this), b = options[a], d = state[a], e = b.resizerClass, f = b.togglerClass, g = $Ps[a]; $Rs[a] = false; $Ts[a] = false; if (!g || !b.closable && !b.resizable) return; var h = c[a].edge, i = g.is(":visible"), j = i ? b.spacing_open : b.spacing_closed, k = "-" + a, l = i ? "-open" : "-closed", m, n; m = $Rs[a] = $("<span></span>"); if (i && b.resizable); else if (!i && b.slidable) m.attr("title", b.sliderTip).css("cursor", b.sliderCursor); m.attr("id", b.paneSelector.substr(0, 1) == "#" ? b.paneSelector.substr(1) + "-resizer" : "").attr("resizer", a).css(c.resizers.cssReq).css(h, cDims[h] + getPaneSize(a)).addClass(e + " " + e + k + " " + e + l + " " + e + k + l).appendTo($Container); if (b.applyDefaultStyles) m.css(c.resizers.cssDef); if (b.closable) { n = $Ts[a] = $("<div></div>"); n.attr("id", b.paneSelector.substr(0, 1) == "#" ? b.paneSelector.substr(1) + "-toggler" : "").css(c.togglers.cssReq).attr("title", i ? b.togglerTip_open : b.togglerTip_closed).click(function (b) { toggle(a); b.stopPropagation() }).mouseover(function (a) { a.stopPropagation() }).addClass(f + " " + f + k + " " + f + l + " " + f + k + l).appendTo(m); if (b.togglerContent_open) $("<span>" + b.togglerContent_open + "</span>").addClass("content content-open").css("display", d.isClosed ? "none" : "block").appendTo(n); if (b.togglerContent_closed) $("<span>" + b.togglerContent_closed + "</span>").addClass("content content-closed").css("display", d.isClosed ? "block" : "none").appendTo(n); if (b.applyDefaultStyles) n.css(c.togglers.cssDef); if (!i) bindStartSlidingEvent(a, true) } }); sizeHandles("all", true) }; var initResizable = function () { var a = typeof $.fn.draggable == "function", b, d, e; $.each(c.borderPanes.split(","), function () { var b = str(this), d = options[b], f = state[b]; if (!a || !$Ps[b] || !d.resizable) { d.resizable = false; return true } var g = d.resizerClass, h = g + "-drag", i = g + "-" + b + "-drag", j = g + "-dragging", k = g + "-" + b + "-dragging", l = false, m = $Ps[b], n = $Rs[b]; if (!f.isClosed) n.attr("title", d.resizerTip).css("cursor", d.resizerCursor); n.draggable({ containment: $Container[0], axis: c[b].dir == "horz" ? "y" : "x", delay: 200, distance: 1, helper: "clone", opacity: d.resizerDragOpacity, zIndex: c.zIndex.resizing, start: function (a, g) { if (false === execUserCallback(b, d.onresize_start)) return false; f.isResizing = true; clearTimer(b, "closeSlider"); n.addClass(h + " " + i); l = false; var j = b == "east" || b == "south" ? d.spacing_open : 0; setPaneMinMaxSizes(b); f.minPosition -= j; f.maxPosition -= j; e = c[b].dir == "horz" ? "top" : "left"; $(d.maskIframesOnResize === true ? "iframe" : d.maskIframesOnResize).each(function () { $('<div class="ui-layout-mask"/>').css({ background: "#fff", opacity: "0.001", zIndex: 9, position: "absolute", width: this.offsetWidth + "px", height: this.offsetHeight + "px" }).css($(this).offset()).appendTo(this.parentNode) }) }, drag: function (a, d) { if (!l) { $(".ui-draggable-dragging").addClass(j + " " + k).children().css("visibility", "hidden"); l = true; if (f.isSliding) $Ps[b].css("zIndex", c.zIndex.sliding) } if (d.position[e] < f.minPosition) d.position[e] = f.minPosition; else if (d.position[e] > f.maxPosition) d.position[e] = f.maxPosition }, stop: function (a, d) { var e = d.position, g, j; n.removeClass(h + " " + i); switch (b) { case "north": g = e.top; break; case "west": g = e.left; break; case "south": g = cDims.outerHeight - e.top - n.outerHeight(); break; case "east": g = cDims.outerWidth - e.left - n.outerWidth(); break } j = g - cDims[c[b].edge]; sizePane(b, j); $("div.ui-layout-mask").remove(); f.isResizing = false } }) }) }; var hide = function (a, b) { var d = options[a], e = state[a], f = $Ps[a], g = $Rs[a]; if (!f || e.isHidden) return; if (false === execUserCallback(a, d.onhide_start)) return; e.isSliding = false; if (g) g.hide(); if (b || e.isClosed) { e.isClosed = true; e.isHidden = true; f.hide(); sizeMidPanes(c[a].dir == "horz" ? "all" : "center"); execUserCallback(a, d.onhide_end || d.onhide) } else { e.isHiding = true; close(a, false) } }; var show = function (a, b) { var c = options[a], d = state[a], e = $Ps[a], f = $Rs[a]; if (!e || !d.isHidden) return; if (false === execUserCallback(a, c.onshow_start)) return; d.isSliding = false; d.isShowing = true; if (f && c.spacing_open > 0) f.show(); if (b === false) close(a, true); else open(a) }; var toggle = function (a) { var b = state[a]; if (b.isHidden) show(a); else if (b.isClosed) open(a); else close(a) }; var close = function (a, b, d) { function t() { bindStartSlidingEvent(a, true); if (!r) execUserCallback(a, h.onclose_end || h.onclose); if (r) execUserCallback(a, h.onshow_end || h.onshow); if (s) execUserCallback(a, h.onhide_end || h.onhide); execFlowCallback(a) } var e = $Ps[a], f = $Rs[a], g = $Ts[a], h = options[a], i = state[a], j = !d && !i.isClosed && h.fxName_close != "none", k = c[a].edge, l = h.resizerClass, m = h.togglerClass, n = "-" + a, o = "-open", p = "-sliding", q = "-closed", r = i.isShowing, s = i.isHiding; delete i.isShowing; delete i.isHiding; if (!e || !h.resizable && !h.closable) return; else if (!b && i.isClosed && !r) return; if (c.isLayoutBusy) { setFlowCallback("close", a, b); return } if (!r && false === execUserCallback(a, h.onclose_start)) return; c[a].isMoving = true; c.isLayoutBusy = true; i.isClosed = true; if (s) i.isHidden = true; else if (r) i.isHidden = false; syncPinBtns(a, false); if (!i.isSliding) sizeMidPanes(c[a].dir == "horz" ? "all" : "center"); if (f) { f.css(k, cDims[k]).removeClass(l + o + " " + l + n + o).removeClass(l + p + " " + l + n + p).addClass(l + q + " " + l + n + q); if (h.resizable) f.draggable("disable").css("cursor", "default").attr("title", ""); if (g) { g.removeClass(m + o + " " + m + n + o).addClass(m + q + " " + m + n + q).attr("title", h.togglerTip_closed) } sizeHandles() } if (j) { lockPaneForFX(a, true); e.hide(h.fxName_close, h.fxSettings_close, h.fxSpeed_close, function () { lockPaneForFX(a, false); if (!i.isClosed) return; t() }) } else { e.hide(); t() } }; var open = function (a, b, d) { function s() { if (!i.isSliding) sizeMidPanes(c[a].dir == "vert" ? "center" : "all"); if (f) { f.css(k, cDims[k] + getPaneSize(a)).removeClass(l + p + " " + l + n + p).addClass(l + o + " " + l + n + o).addClass(!i.isSliding ? "" : l + q + " " + l + n + q); if (h.resizable) f.draggable("enable").css("cursor", h.resizerCursor).attr("title", h.resizerTip); else f.css("cursor", "default"); if (g) { g.removeClass(m + p + " " + m + n + p).addClass(m + o + " " + m + n + o).attr("title", h.togglerTip_open) } sizeHandles("all") } sizeContent(a); syncPinBtns(a, !i.isSliding); execUserCallback(a, h.onopen_end || h.onopen); if (r) execUserCallback(a, h.onshow_end || h.onshow); execFlowCallback(a) } var e = $Ps[a], f = $Rs[a], g = $Ts[a], h = options[a], i = state[a], j = !d && i.isClosed && h.fxName_open != "none", k = c[a].edge, l = h.resizerClass, m = h.togglerClass, n = "-" + a, o = "-open", p = "-closed", q = "-sliding", r = i.isShowing; delete i.isShowing; if (!e || !h.resizable && !h.closable) return; else if (!i.isClosed && !i.isSliding) return; if (i.isHidden && !r) { show(a, true); return } if (c.isLayoutBusy) { setFlowCallback("open", a, b); return } if (false === execUserCallback(a, h.onopen_start)) return; c[a].isMoving = true; c.isLayoutBusy = true; if (i.isSliding && !b) bindStopSlidingEvents(a, false); i.isClosed = false; if (r) i.isHidden = false; setPaneMinMaxSizes(a); if (i.size > i.maxSize) e.css(c[a].sizeType, max(1, cssSize(a, i.maxSize))); bindStartSlidingEvent(a, false); if (j) { lockPaneForFX(a, true); e.show(h.fxName_open, h.fxSettings_open, h.fxSpeed_open, function () { lockPaneForFX(a, false); if (i.isClosed) return; s() }) } else { e.show(); s() } }; var lockPaneForFX = function (a, b) { var d = $Ps[a]; if (b) { d.css({ zIndex: c.zIndex.animation }); if (a == "south") d.css({ top: cDims.top + cDims.innerHeight - d.outerHeight() }); else if (a == "east") d.css({ left: cDims.left + cDims.innerWidth - d.outerWidth() }) } else { if (!state[a].isSliding) d.css({ zIndex: c.zIndex.pane_normal }); if (a == "south") d.css({ top: "auto" }); else if (a == "east") d.css({ left: "auto" }) } }; var bindStartSlidingEvent = function (a, b) { var c = options[a], d = $Rs[a], e = c.slideTrigger_open; if (!d || !c.slidable) return; if (e != "click" && e != "dblclick" && e != "mouseover") e = "click"; d[b ? "bind" : "unbind"](e, slideOpen).css("cursor", b ? c.sliderCursor : "default").attr("title", b ? c.sliderTip : "") }; var bindStopSlidingEvents = function (a, b) { function j(b) { clearTimer(a, "closeSlider"); b.stopPropagation() } var d = options[a], e = state[a], f = d.slideTrigger_close, g = b ? "bind" : "unbind", h = $Ps[a], i = $Rs[a]; e.isSliding = b; clearTimer(a, "closeSlider"); h.css({ zIndex: b ? c.zIndex.sliding : c.zIndex.pane_normal }); i.css({ zIndex: b ? c.zIndex.sliding : c.zIndex.resizer_normal }); if (f != "click" && f != "mouseout") f = "mouseout"; if (b) { h.bind(f, slideClosed); i.bind(f, slideClosed); if (f = "mouseout") { h.bind("mouseover", j); i.bind("mouseover", j) } } else { h.unbind(f); i.unbind(f); if (f = "mouseout") { h.unbind("mouseover"); i.unbind("mouseover"); clearTimer(a, "closeSlider") } } }; var slideOpen = function () { var a = $(this).attr("resizer"); if (state[a].isClosed) { bindStopSlidingEvents(a, true); open(a, true) } }; var slideClosed = function () { function e() { bindStopSlidingEvents(b, false); if (!d.isClosed) close(b) } var a = $(this), b = a.attr("pane") || a.attr("resizer"), c = options[b], d = state[b]; if (d.isClosed || d.isResizing) return; else if (c.slideTrigger_close == "click") e(); else setTimer(b, "closeSlider", e, 300) }; var sizePane = function (a, b) { var d = c[a].edge, e = c[a].dir, f = options[a], g = state[a], h = $Ps[a], i = $Rs[a]; setPaneMinMaxSizes(a); g.minSize = max(g.minSize, f.minSize); if (f.maxSize > 0) g.maxSize = min(g.maxSize, f.maxSize); b = max(b, g.minSize); b = min(b, g.maxSize); g.size = b; i.css(d, b + cDims[d]); h.css(c[a].sizeType, max(1, cssSize(a, b))); if (!g.isSliding) sizeMidPanes(e == "horz" ? "all" : "center"); sizeHandles(); sizeContent(a); execUserCallback(a, f.onresize_end || f.onresize) }; var sizeMidPanes = function (a, b, c) { if (!a || a == "all") a = "east,west,center"; var d = getPaneDims(); if (b) $.extend(d, b); $.each(a.split(","), function () { if (!$Ps[this]) return; var a = str(this), b = options[a], e = state[a], f = $Ps[a], g = $Rs[a], h = true, i = {}; if (a == "center") { d = getPaneDims(); i = $.extend({}, d); i.width = max(1, cssW(a, i.width)); i.height = max(1, cssH(a, i.height)); h = i.width > 1 && i.height > 1; if ($.browser.msie && (!$.boxModel || $.browser.version < 7)) { if ($Ps.north) $Ps.north.css({ width: cssW($Ps.north, cDims.innerWidth) }); if ($Ps.south) $Ps.south.css({ width: cssW($Ps.south, cDims.innerWidth) }) } } else { i.top = d.top; i.bottom = d.bottom; i.height = max(1, cssH(a, d.height)); h = i.height > 1 } if (h) { f.css(i); if (e.noRoom) { e.noRoom = false; if (e.isHidden) return; else show(a, !e.isClosed) } if (!c) { sizeContent(a); execUserCallback(a, b.onresize_end || b.onresize) } } else if (!e.noRoom) { e.noRoom = true; if (e.isHidden) return; if (c) { f.hide(); if (g) g.hide() } else hide(a) } }) }; var sizeContent = function (a) { if (!a || a == "all") a = c.allPanes; $.each(a.split(","), function () { if (!$Cs[this]) return; var a = str(this), b = options[a].contentIgnoreSelector, c = $Ps[a], d = $Cs[a], e = d[0], f = cssH(c); c.children().each(function () { if (this == e) return; var a = $(this); if (!b || !a.is(b)) f -= a.outerHeight() }); if (f > 0) f = cssH(d, f); if (f < 1) d.hide(); else d.css({ height: f }).show() }) }; var sizeHandles = function (a, b) { if (!a || a == "all") a = c.borderPanes; $.each(a.split(","), function () { var a = str(this), d = options[a], e = state[a], f = $Ps[a], g = $Rs[a], h = $Ts[a]; if (!f || !g || !d.resizable && !d.closable) return; var i = c[a].dir, j = e.isClosed ? "_closed" : "_open", k = d["spacing" + j], l = d["togglerAlign" + j], m = d["togglerLength" + j], n, o, p = {}; if (k == 0) { g.hide(); return } else if (!e.noRoom && !e.isHidden) g.show(); if (i == "horz") { n = f.outerWidth(); g.css({ width: max(1, cssW(g, n)), height: max(1, cssH(g, k)), left: cssNum(f, "left") }) } else { n = f.outerHeight(); g.css({ height: max(1, cssH(g, n)), width: max(1, cssW(g, k)), top: cDims.top + getPaneSize("north", true) }) } if (h) { if (m == 0 || e.isSliding && d.hideTogglerOnSlide) { h.hide(); return } else h.show(); if (!(m > 0) || m == "100%" || m > n) { m = n; o = 0 } else { if (typeof l == "string") { switch (l) { case "top": case "left": o = 0; break; case "bottom": case "right": o = n - m; break; case "middle": case "center": default: o = Math.floor((n - m) / 2) } } else { var q = parseInt(l); if (l >= 0) o = q; else o = n - m + q } } var r = d.togglerContent_open ? h.children(".content-open") : false, s = d.togglerContent_closed ? h.children(".content-closed") : false, t = e.isClosed ? s : r; if (r) r.css("display", e.isClosed ? "none" : "block"); if (s) s.css("display", e.isClosed ? "block" : "none"); if (i == "horz") { var u = cssW(h, m); h.css({ width: max(0, u), height: max(1, cssH(h, k)), left: o }); if (t) t.css("marginLeft", Math.floor((u - t.outerWidth()) / 2)) } else { var v = cssH(h, m); h.css({ height: max(0, v), width: max(1, cssW(h, k)), top: o }); if (t) t.css("marginTop", Math.floor((v - t.outerHeight()) / 2)) } } if (b && d.initHidden) { g.hide(); if (h) h.hide() } }) }; var resizeAll = function () { var a = cDims.innerWidth, b = cDims.innerHeight; cDims = state.container = getElemDims($Container); var d = cDims.innerHeight < b, e = cDims.innerWidth < a, f, g; if (d || e) $.each(["south", "north", "east", "west"], function (a, b) { f = state[b]; g = c[b].dir; if (!f.isClosed && (d && g == "horz" || e && g == "vert")) { setPaneMinMaxSizes(b); if (f.size > f.maxSize) sizePane(b, f.maxSize) } }); sizeMidPanes("all"); sizeHandles("all") }; var $Container = $(this).css({ overflow: "hidden" }), $Ps = {}, $Cs = {}, $Rs = {}, $Ts = {}, c = config, cDims = state.container; create(); return { options: options, state: state, panes: $Ps, toggle: toggle, open: open, close: close, hide: hide, show: show, resizeContent: sizeContent, sizePane: sizePane, resizeAll: resizeAll, addToggleBtn: addToggleBtn, addOpenBtn: addOpenBtn, addCloseBtn: addCloseBtn, addPinBtn: addPinBtn, allowOverflow: allowOverflow, resetOverflow: resetOverflow, cssWidth: cssW, cssHeight: cssH} } })(jQuery)