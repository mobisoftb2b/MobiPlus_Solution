(function (a) { a.widget("ui.multiselect", { _init: function () { this.element.hide(); this.id = this.element.attr("id"); this.container = a('<div class="ui-multiselect ui-helper-clearfix ui-widget"></div>').insertAfter(this.element); this.count = 0; this.selectedContainer = a('<div class="selected"></div>').appendTo(this.container); this.availableContainer = a('<div class="available"></div>').appendTo(this.container); this.selectedActions = a('<div class="actions ui-widget-header ui-helper-clearfix"><span class="count">0 ' + a.ui.multiselect.locale.itemsCount + '</span><a href="#" class="remove-all">' + a.ui.multiselect.locale.removeAll + "</a></div>").appendTo(this.selectedContainer); this.availableActions = a('<div class="actions ui-widget-header ui-helper-clearfix"><input type="text" class="search empty ui-widget-content ui-corner-all"/><a href="#" class="add-all">' + a.ui.multiselect.locale.addAll + "</a></div>").appendTo(this.availableContainer); this.selectedList = a('<ul class="selected connected-list"><li class="ui-helper-hidden-accessible"></li></ul>').bind("selectstart", function () { return false }).appendTo(this.selectedContainer); this.availableList = a('<ul class="available connected-list"><li class="ui-helper-hidden-accessible"></li></ul>').bind("selectstart", function () { return false }).appendTo(this.availableContainer); var b = this; this.container.width(this.element.width() + 1); this.selectedContainer.width(Math.floor(this.element.width() * this.options.dividerLocation)); this.availableContainer.width(Math.floor(this.element.width() * (1 - this.options.dividerLocation))); this.selectedList.height(Math.max(this.element.height() - this.selectedActions.height(), 1)); this.availableList.height(Math.max(this.element.height() - this.availableActions.height(), 1)); if (!this.options.animated) { this.options.show = "show"; this.options.hide = "hide" } this._populateLists(this.element.find("option")); if (this.options.sortable) { a("ul.selected").sortable({ placeholder: "ui-state-highlight", axis: "y", update: function (c, d) { b.selectedList.find("li").each(function () { if (a(this).data("optionLink")) a(this).data("optionLink").remove().appendTo(b.element) }) }, receive: function (c, d) { d.item.data("optionLink").attr("selected", true); b.count += 1; b._updateCount(); b.selectedList.children(".ui-draggable").each(function () { a(this).removeClass("ui-draggable"); a(this).data("optionLink", d.item.data("optionLink")); a(this).data("idx", d.item.data("idx")); b._applyItemState(a(this), true) }); setTimeout(function () { d.item.remove() }, 1) } }) } if (this.options.searchable) { this._registerSearchEvents(this.availableContainer.find("input.search")) } else { a(".search").hide() } a(".remove-all").click(function () { b._populateLists(b.element.find("option").removeAttr("selected")); return false }); a(".add-all").click(function () { b._populateLists(b.element.find("option").attr("selected", "selected")); return false }) }, destroy: function () { this.element.show(); this.container.remove(); a.widget.prototype.destroy.apply(this, arguments) }, _populateLists: function (b) { this.selectedList.children(".ui-element").remove(); this.availableList.children(".ui-element").remove(); this.count = 0; var c = this; var d = a(b.map(function (a) { var b = c._getOptionNode(this).appendTo(this.selected ? c.selectedList : c.availableList).show(); if (this.selected) c.count += 1; c._applyItemState(b, this.selected); b.data("idx", a); return b[0] })); this._updateCount() }, _updateCount: function () { this.selectedContainer.find("span.count").text(this.count + " " + a.ui.multiselect.locale.itemsCount) }, _getOptionNode: function (b) { b = a(b); var c = a('<li class="ui-state-default ui-element" title="' + b.text() + '"><span class="ui-icon"/>' + b.text() + '<a href="#" class="action"><span class="ui-corner-all ui-icon"/></a></li>').hide(); c.data("optionLink", b); return c }, _cloneWithData: function (a) { var b = a.clone(); b.data("optionLink", a.data("optionLink")); b.data("idx", a.data("idx")); return b }, _setSelected: function (b, c) { b.data("optionLink").attr("selected", c); if (c) { var d = this._cloneWithData(b); b[this.options.hide](this.options.animated, function () { a(this).remove() }); d.appendTo(this.selectedList).hide()[this.options.show](this.options.animated); this._applyItemState(d, true); return d } else { var e = this.availableList.find("li"), f = this.options.nodeComparator; var g = null, h = b.data("idx"), i = f(b, a(e[h])); if (i) { while (h >= 0 && h < e.length) { i > 0 ? h++ : h--; if (i != f(b, a(e[h]))) { g = e[i > 0 ? h : h + 1]; break } } } else { g = e[h] } var j = this._cloneWithData(b); g ? j.insertBefore(a(g)) : j.appendTo(this.availableList); b[this.options.hide](this.options.animated, function () { a(this).remove() }); j.hide()[this.options.show](this.options.animated); this._applyItemState(j, false); return j } }, _applyItemState: function (a, b) { if (b) { if (this.options.sortable) a.children("span").addClass("ui-icon-arrowthick-2-n-s").removeClass("ui-helper-hidden").addClass("ui-icon"); else a.children("span").removeClass("ui-icon-arrowthick-2-n-s").addClass("ui-helper-hidden").removeClass("ui-icon"); a.find("a.action span").addClass("ui-icon-minus").removeClass("ui-icon-plus"); this._registerRemoveEvents(a.find("a.action")) } else { a.children("span").removeClass("ui-icon-arrowthick-2-n-s").addClass("ui-helper-hidden").removeClass("ui-icon"); a.find("a.action span").addClass("ui-icon-plus").removeClass("ui-icon-minus"); this._registerAddEvents(a.find("a.action")) } this._registerHoverEvents(a) }, _filter: function (b) { var c = a(this); var d = b.children("li"), e = d.map(function () { return a(this).text().toLowerCase() }); var f = a.trim(c.val().toLowerCase()), g = []; if (!f) { d.show() } else { d.hide(); e.each(function (a) { if (this.indexOf(f) > -1) { g.push(a) } }); a.each(g, function () { a(d[this]).show() }) } }, _registerHoverEvents: function (b) { b.removeClass("ui-state-hover"); b.mouseover(function () { a(this).addClass("ui-state-hover") }); b.mouseout(function () { a(this).removeClass("ui-state-hover") }) }, _registerAddEvents: function (b) { var c = this; b.click(function () { var b = c._setSelected(a(this).parent(), true); c.count += 1; c._updateCount(); return false }).each(function () { a(this).parent().draggable({ connectToSortable: "ul.selected", helper: function () { var b = c._cloneWithData(a(this)).width(a(this).width() - 50); b.width(a(this).width()); return b }, appendTo: ".ui-multiselect", containment: ".ui-multiselect", revert: "invalid" }) }) }, _registerRemoveEvents: function (b) { var c = this; b.click(function () { c._setSelected(a(this).parent(), false); c.count -= 1; c._updateCount(); return false }) }, _registerSearchEvents: function (b) { var c = this; b.focus(function () { a(this).addClass("ui-state-active") }).blur(function () { a(this).removeClass("ui-state-active") }).keypress(function (a) { if (a.keyCode == 13) return false }).keyup(function () { c._filter.apply(this, [c.availableList]) }) } }); a.extend(a.ui.multiselect, { defaults: { sortable: true, searchable: true, animated: "fast", show: "slideDown", hide: "slideUp", dividerLocation: .6, nodeComparator: function (a, b) { var c = a.text(), d = b.text(); return c == d ? 0 : c < d ? -1 : 1 } }, locale: { addAll: "Add all", removeAll: "Remove all", itemsCount: "items selected"} }) })(jQuery)