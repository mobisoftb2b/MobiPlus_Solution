(function () { function removeNode(a) { a.parentNode.removeChild(a) } function removeClass(a, b) { var c = new RegExp("\\b" + b + "\\b"); a.className = a.className.replace(c, "") } function addClass(a, b) { if (!hasClass(a, b)) { a.className += " " + b } } function hasClass(a, b) { var c = new RegExp("\\b" + b + "\\b"); return c.test(a.className) } function getExt(a) { return -1 !== a.indexOf(".") ? a.replace(/.*[.]/, "") : "" } function fileFromPath(a) { return a.replace(/.*(\/|\\)/, "") } function copyLayout(a, b) { var c = getBox(a); addStyles(b, { position: "absolute", left: c.left + "px", top: c.top + "px", width: a.offsetWidth + "px", height: a.offsetHeight + "px" }) } function addStyles(a, b) { for (var c in b) { if (b.hasOwnProperty(c)) { a.style[c] = b[c] } } } function getBox(a) { var b, c, d, e; var f = getOffset(a); b = f.left; d = f.top; c = b + a.offsetWidth; e = d + a.offsetHeight; return { left: b, right: c, top: d, bottom: e} } function addResizeEvent(a) { var b; addEvent(window, "resize", function () { if (b) { clearTimeout(b) } b = setTimeout(a, 100) }) } function addEvent(a, b, c) { if (a.addEventListener) { a.addEventListener(b, c, false) } else if (a.attachEvent) { a.attachEvent("on" + b, function () { c.call(a) }) } else { throw new Error("not supported or DOM not loaded") } } if (document.documentElement.getBoundingClientRect) { var getOffset = function (a) { var b = a.getBoundingClientRect(); var c = a.ownerDocument; var d = c.body; var e = c.documentElement; var f = e.clientTop || d.clientTop || 0; var g = e.clientLeft || d.clientLeft || 0; var h = 1; if (d.getBoundingClientRect) { var i = d.getBoundingClientRect(); h = (i.right - i.left) / d.clientWidth } if (h > 1) { f = 0; g = 0 } var j = b.top / h + (window.pageYOffset || e && e.scrollTop / h || d.scrollTop / h) - f, k = b.left / h + (window.pageXOffset || e && e.scrollLeft / h || d.scrollLeft / h) - g; return { top: j, left: k} } } else { var getOffset = function (a) { var b = 0, c = 0; do { b += a.offsetTop || 0; c += a.offsetLeft || 0; a = a.offsetParent } while (a); return { left: c, top: b} } } var toElement = function () { var a = document.createElement("div"); return function (b) { a.innerHTML = b; var c = a.firstChild; return a.removeChild(c) } } (); var getUID = function () { var a = 0; return function () { return "ValumsAjaxUpload" + a++ } } (); window.AjaxUpload = function (a, b) { this._settings = { action: "upload.php", name: "userfile", multiple: false, data: {}, autoSubmit: true, responseType: false, hoverClass: "hover", focusClass: "focus", disabledClass: "disabled", onChange: function (a, b) { }, onSubmit: function (a, b) { }, onComplete: function (a, b) { } }; for (var c in b) { if (b.hasOwnProperty(c)) { this._settings[c] = b[c] } } if (a.jquery) { a = a[0] } else if (typeof a == "string") { if (/^#.*/.test(a)) { a = a.slice(1) } a = document.getElementById(a) } if (!a || a.nodeType !== 1) { throw new Error("Please make sure that you're passing a valid element") } if (a.nodeName.toUpperCase() == "A") { addEvent(a, "click", function (a) { if (a && a.preventDefault) { a.preventDefault() } else if (window.event) { window.event.returnValue = false } }) } this._button = a; this._input = null; this._disabled = false; this.enable(); this._rerouteClicks() }; AjaxUpload.prototype = { setData: function (a) { this._settings.data = a }, disable: function () { addClass(this._button, this._settings.disabledClass); this._disabled = true; var a = this._button.nodeName.toUpperCase(); if (a == "INPUT" || a == "BUTTON") { this._button.setAttribute("disabled", "disabled") } if (this._input) { if (this._input.parentNode) { this._input.parentNode.style.visibility = "hidden" } } }, enable: function () { removeClass(this._button, this._settings.disabledClass); this._button.removeAttribute("disabled"); this._disabled = false }, _createInput: function () { var a = this; var b = document.createElement("input"); b.setAttribute("type", "file"); b.setAttribute("name", this._settings.name); if (this._settings.multiple) b.setAttribute("multiple", "multiple"); addStyles(b, { position: "absolute", right: 0, margin: 0, padding: 0, fontSize: "480px", fontFamily: "sans-serif", cursor: "pointer" }); var c = document.createElement("div"); addStyles(c, { display: "block", position: "absolute", overflow: "hidden", margin: 0, padding: 0, opacity: 0, direction: "ltr", zIndex: 2147483583 }); if (c.style.opacity !== "0") { if (typeof c.filters == "undefined") { throw new Error("Opacity not supported by the browser") } c.style.filter = "alpha(opacity=0)" } addEvent(b, "change", function () { if (!b || b.value === "") { return } var c = fileFromPath(b.value); if (false === a._settings.onChange.call(a, c, getExt(c))) { a._clearInput(); return } if (a._settings.autoSubmit) { a.submit() } }); addEvent(b, "mouseover", function () { addClass(a._button, a._settings.hoverClass) }); addEvent(b, "mouseout", function () { removeClass(a._button, a._settings.hoverClass); removeClass(a._button, a._settings.focusClass); if (b.parentNode) { b.parentNode.style.visibility = "hidden" } }); addEvent(b, "focus", function () { addClass(a._button, a._settings.focusClass) }); addEvent(b, "blur", function () { removeClass(a._button, a._settings.focusClass) }); c.appendChild(b); document.body.appendChild(c); this._input = b }, _clearInput: function () { if (!this._input) { return } removeNode(this._input.parentNode); this._input = null; this._createInput(); removeClass(this._button, this._settings.hoverClass); removeClass(this._button, this._settings.focusClass) }, _rerouteClicks: function () { var a = this; addEvent(a._button, "mouseover", function () { if (a._disabled) { return } if (!a._input) { a._createInput() } var b = a._input.parentNode; copyLayout(a._button, b); b.style.visibility = "visible" }) }, _createIframe: function () { var a = getUID(); var b = toElement('<iframe src="javascript:false;" name="' + a + '" />'); b.setAttribute("id", a); b.style.display = "none"; document.body.appendChild(b); return b }, _createForm: function (a) { var b = this._settings; var c = toElement('<form method="post" enctype="multipart/form-data"></form>'); c.setAttribute("action", b.action); c.setAttribute("target", a.name); c.style.display = "none"; document.body.appendChild(c); for (var d in b.data) { if (b.data.hasOwnProperty(d)) { var e = document.createElement("input"); e.setAttribute("type", "hidden"); e.setAttribute("name", d); e.setAttribute("value", b.data[d]); c.appendChild(e) } } return c }, _getResponse: function (iframe, file) { var toDeleteFlag = false, self = this, settings = this._settings; addEvent(iframe, "load", function () { if (iframe.src == "javascript:'%3Chtml%3E%3C/html%3E';" || iframe.src == "javascript:'<html></html>';") { if (toDeleteFlag) { setTimeout(function () { removeNode(iframe) }, 0) } return } var doc = iframe.contentDocument ? iframe.contentDocument : window.frames[iframe.id].document; if (doc.readyState && doc.readyState != "complete") { return } if (doc.body && doc.body.innerHTML == "false") { return } var response; if (doc.XMLDocument) { response = doc.XMLDocument } else if (doc.body) { response = doc.body.innerHTML; if (settings.responseType && settings.responseType.toLowerCase() == "json") { if (doc.body.firstChild && doc.body.firstChild.nodeName.toUpperCase() == "PRE") { doc.normalize(); response = doc.body.firstChild.firstChild.nodeValue } if (response) { response = eval("(" + response + ")") } else { response = {} } } } else { response = doc } settings.onComplete.call(self, file, response); toDeleteFlag = true; iframe.src = "javascript:'<html></html>';" }) }, submit: function () { var a = this, b = this._settings; if (!this._input || this._input.value === "") { return } var c = fileFromPath(this._input.value); if (false === b.onSubmit.call(this, c, getExt(c))) { this._clearInput(); return } var d = this._createIframe(); var e = this._createForm(d); removeNode(this._input.parentNode); removeClass(a._button, a._settings.hoverClass); removeClass(a._button, a._settings.focusClass); e.appendChild(this._input); e.submit(); removeNode(e); e = null; removeNode(this._input); this._input = null; this._getResponse(d, c); this._createInput() } } })()