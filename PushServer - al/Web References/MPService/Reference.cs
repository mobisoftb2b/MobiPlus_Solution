//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.18444.
// 
#pragma warning disable 1591

namespace PushServer.MPService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MobiPlusServiceSoap", Namespace="http://tempuri.org/")]
    public partial class MobiPlusService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadStrFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIsThereNewVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMailOperationCompleted;
        
        private System.Threading.SendOrPostCallback Delete_PushServerSender_By_AgentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Delete_AndroidAssignedAgents_By_AgentIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToDicManagersConnectedPushServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFromDicManagersConnectedPushServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillAllFromPushServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearDicManagersConnectedPushServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllManagersConnectedPushServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DNBGetZipFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DNBUploadStrFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DNBUploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunQueryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunQueryTodbOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunSPOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckMediaDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMediaFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DownloadMediaFileResponseBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIMGOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManagerPushEmployeeDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePasswordManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerPushFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCache_ServerPushFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback isToRefreshCacheFuncOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServerPushFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPushServerLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPushServerDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServerPushFilesAgainOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToPasswordManagerOperationCompleted;
        
        private System.Threading.SendOrPostCallback Server_CheckAgentAndHWIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback Server_UpdateAgentToOnlineDBOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPushServerDataAndBlockedDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback MPush_GetManagersListOperationCompleted;
        
        private System.Threading.SendOrPostCallback MPush_GetManagerSyncRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManagersForTabletUIOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetManagerAuthorizationGroupActivitiesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MobiPlusService() {
            this.Url = global::PushServer.Properties.Settings.Default.PushServer_MPService_MobiPlusService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;
        
        /// <remarks/>
        public event DownloadFileCompletedEventHandler DownloadFileCompleted;
        
        /// <remarks/>
        public event UploadStrFileCompletedEventHandler UploadStrFileCompleted;
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event GetIsThereNewVersionCompletedEventHandler GetIsThereNewVersionCompleted;
        
        /// <remarks/>
        public event SendMailCompletedEventHandler SendMailCompleted;
        
        /// <remarks/>
        public event Delete_PushServerSender_By_AgentIDCompletedEventHandler Delete_PushServerSender_By_AgentIDCompleted;
        
        /// <remarks/>
        public event Delete_AndroidAssignedAgents_By_AgentIDCompletedEventHandler Delete_AndroidAssignedAgents_By_AgentIDCompleted;
        
        /// <remarks/>
        public event AddToDicManagersConnectedPushServerCompletedEventHandler AddToDicManagersConnectedPushServerCompleted;
        
        /// <remarks/>
        public event DeleteFromDicManagersConnectedPushServerCompletedEventHandler DeleteFromDicManagersConnectedPushServerCompleted;
        
        /// <remarks/>
        public event FillAllFromPushServerCompletedEventHandler FillAllFromPushServerCompleted;
        
        /// <remarks/>
        public event ClearDicManagersConnectedPushServerCompletedEventHandler ClearDicManagersConnectedPushServerCompleted;
        
        /// <remarks/>
        public event GetAllManagersConnectedPushServerCompletedEventHandler GetAllManagersConnectedPushServerCompleted;
        
        /// <remarks/>
        public event DNBGetZipFileCompletedEventHandler DNBGetZipFileCompleted;
        
        /// <remarks/>
        public event DNBUploadStrFileCompletedEventHandler DNBUploadStrFileCompleted;
        
        /// <remarks/>
        public event DNBUploadFileCompletedEventHandler DNBUploadFileCompleted;
        
        /// <remarks/>
        public event RunQueryCompletedEventHandler RunQueryCompleted;
        
        /// <remarks/>
        public event RunQueryTodbCompletedEventHandler RunQueryTodbCompleted;
        
        /// <remarks/>
        public event RunSPCompletedEventHandler RunSPCompleted;
        
        /// <remarks/>
        public event CheckMediaDirectoryCompletedEventHandler CheckMediaDirectoryCompleted;
        
        /// <remarks/>
        public event DownloadMediaFileCompletedEventHandler DownloadMediaFileCompleted;
        
        /// <remarks/>
        public event DownloadMediaFileResponseBytesCompletedEventHandler DownloadMediaFileResponseBytesCompleted;
        
        /// <remarks/>
        public event GetIMGCompletedEventHandler GetIMGCompleted;
        
        /// <remarks/>
        public event GetManagerPushEmployeeDataCompletedEventHandler GetManagerPushEmployeeDataCompleted;
        
        /// <remarks/>
        public event UpdatePasswordManagerCompletedEventHandler UpdatePasswordManagerCompleted;
        
        /// <remarks/>
        public event GetServerPushFilesCompletedEventHandler GetServerPushFilesCompleted;
        
        /// <remarks/>
        public event UpdateCache_ServerPushFilesCompletedEventHandler UpdateCache_ServerPushFilesCompleted;
        
        /// <remarks/>
        public event isToRefreshCacheFuncCompletedEventHandler isToRefreshCacheFuncCompleted;
        
        /// <remarks/>
        public event DeleteServerPushFileCompletedEventHandler DeleteServerPushFileCompleted;
        
        /// <remarks/>
        public event AddPushServerLogCompletedEventHandler AddPushServerLogCompleted;
        
        /// <remarks/>
        public event AddPushServerDataCompletedEventHandler AddPushServerDataCompleted;
        
        /// <remarks/>
        public event SetServerPushFilesAgainCompletedEventHandler SetServerPushFilesAgainCompleted;
        
        /// <remarks/>
        public event AddToPasswordManagerCompletedEventHandler AddToPasswordManagerCompleted;
        
        /// <remarks/>
        public event Server_CheckAgentAndHWIDCompletedEventHandler Server_CheckAgentAndHWIDCompleted;
        
        /// <remarks/>
        public event Server_UpdateAgentToOnlineDBCompletedEventHandler Server_UpdateAgentToOnlineDBCompleted;
        
        /// <remarks/>
        public event AddPushServerDataAndBlockedDeviceCompletedEventHandler AddPushServerDataAndBlockedDeviceCompleted;
        
        /// <remarks/>
        public event MPush_GetManagersListCompletedEventHandler MPush_GetManagersListCompleted;
        
        /// <remarks/>
        public event MPush_GetManagerSyncRequestCompletedEventHandler MPush_GetManagerSyncRequestCompleted;
        
        /// <remarks/>
        public event GetManagersForTabletUICompletedEventHandler GetManagersForTabletUICompleted;
        
        /// <remarks/>
        public event GetManagerAuthorizationGroupActivitiesCompletedEventHandler GetManagerAuthorizationGroupActivitiesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetFile(string FileName) {
            this.Invoke("GetFile", new object[] {
                        FileName});
        }
        
        /// <remarks/>
        public void GetFileAsync(string FileName) {
            this.GetFileAsync(FileName, null);
        }
        
        /// <remarks/>
        public void GetFileAsync(string FileName, object userState) {
            if ((this.GetFileOperationCompleted == null)) {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        FileName}, this.GetFileOperationCompleted, userState);
        }
        
        private void OnGetFileOperationCompleted(object arg) {
            if ((this.GetFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DownloadFile(string FileName) {
            this.Invoke("DownloadFile", new object[] {
                        FileName});
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string FileName) {
            this.DownloadFileAsync(FileName, null);
        }
        
        /// <remarks/>
        public void DownloadFileAsync(string FileName, object userState) {
            if ((this.DownloadFileOperationCompleted == null)) {
                this.DownloadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadFileOperationCompleted);
            }
            this.InvokeAsync("DownloadFile", new object[] {
                        FileName}, this.DownloadFileOperationCompleted, userState);
        }
        
        private void OnDownloadFileOperationCompleted(object arg) {
            if ((this.DownloadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadStrFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadStrFile(string FileName, string strFile) {
            object[] results = this.Invoke("UploadStrFile", new object[] {
                        FileName,
                        strFile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadStrFileAsync(string FileName, string strFile) {
            this.UploadStrFileAsync(FileName, strFile, null);
        }
        
        /// <remarks/>
        public void UploadStrFileAsync(string FileName, string strFile, object userState) {
            if ((this.UploadStrFileOperationCompleted == null)) {
                this.UploadStrFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadStrFileOperationCompleted);
            }
            this.InvokeAsync("UploadStrFile", new object[] {
                        FileName,
                        strFile}, this.UploadStrFileOperationCompleted, userState);
        }
        
        private void OnUploadStrFileOperationCompleted(object arg) {
            if ((this.UploadStrFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadStrFileCompleted(this, new UploadStrFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFile(string FileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bFile) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        FileName,
                        bFile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(string FileName, byte[] bFile) {
            this.UploadFileAsync(FileName, bFile, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(string FileName, byte[] bFile, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        FileName,
                        bFile}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIsThereNewVersion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetIsThereNewVersion(string AgentID, string FromVersion, string ProjectType) {
            this.Invoke("GetIsThereNewVersion", new object[] {
                        AgentID,
                        FromVersion,
                        ProjectType});
        }
        
        /// <remarks/>
        public void GetIsThereNewVersionAsync(string AgentID, string FromVersion, string ProjectType) {
            this.GetIsThereNewVersionAsync(AgentID, FromVersion, ProjectType, null);
        }
        
        /// <remarks/>
        public void GetIsThereNewVersionAsync(string AgentID, string FromVersion, string ProjectType, object userState) {
            if ((this.GetIsThereNewVersionOperationCompleted == null)) {
                this.GetIsThereNewVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIsThereNewVersionOperationCompleted);
            }
            this.InvokeAsync("GetIsThereNewVersion", new object[] {
                        AgentID,
                        FromVersion,
                        ProjectType}, this.GetIsThereNewVersionOperationCompleted, userState);
        }
        
        private void OnGetIsThereNewVersionOperationCompleted(object arg) {
            if ((this.GetIsThereNewVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIsThereNewVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendMail(string To, string MSG, string bFile, string FileName, string Pass) {
            object[] results = this.Invoke("SendMail", new object[] {
                        To,
                        MSG,
                        bFile,
                        FileName,
                        Pass});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendMailAsync(string To, string MSG, string bFile, string FileName, string Pass) {
            this.SendMailAsync(To, MSG, bFile, FileName, Pass, null);
        }
        
        /// <remarks/>
        public void SendMailAsync(string To, string MSG, string bFile, string FileName, string Pass, object userState) {
            if ((this.SendMailOperationCompleted == null)) {
                this.SendMailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMailOperationCompleted);
            }
            this.InvokeAsync("SendMail", new object[] {
                        To,
                        MSG,
                        bFile,
                        FileName,
                        Pass}, this.SendMailOperationCompleted, userState);
        }
        
        private void OnSendMailOperationCompleted(object arg) {
            if ((this.SendMailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMailCompleted(this, new SendMailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete_PushServerSender_By_AgentID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete_PushServerSender_By_AgentID(string Password, string AgentID) {
            object[] results = this.Invoke("Delete_PushServerSender_By_AgentID", new object[] {
                        Password,
                        AgentID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Delete_PushServerSender_By_AgentIDAsync(string Password, string AgentID) {
            this.Delete_PushServerSender_By_AgentIDAsync(Password, AgentID, null);
        }
        
        /// <remarks/>
        public void Delete_PushServerSender_By_AgentIDAsync(string Password, string AgentID, object userState) {
            if ((this.Delete_PushServerSender_By_AgentIDOperationCompleted == null)) {
                this.Delete_PushServerSender_By_AgentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelete_PushServerSender_By_AgentIDOperationCompleted);
            }
            this.InvokeAsync("Delete_PushServerSender_By_AgentID", new object[] {
                        Password,
                        AgentID}, this.Delete_PushServerSender_By_AgentIDOperationCompleted, userState);
        }
        
        private void OnDelete_PushServerSender_By_AgentIDOperationCompleted(object arg) {
            if ((this.Delete_PushServerSender_By_AgentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Delete_PushServerSender_By_AgentIDCompleted(this, new Delete_PushServerSender_By_AgentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Delete_AndroidAssignedAgents_By_AgentID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Delete_AndroidAssignedAgents_By_AgentID(string Password, string AgentID) {
            object[] results = this.Invoke("Delete_AndroidAssignedAgents_By_AgentID", new object[] {
                        Password,
                        AgentID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Delete_AndroidAssignedAgents_By_AgentIDAsync(string Password, string AgentID) {
            this.Delete_AndroidAssignedAgents_By_AgentIDAsync(Password, AgentID, null);
        }
        
        /// <remarks/>
        public void Delete_AndroidAssignedAgents_By_AgentIDAsync(string Password, string AgentID, object userState) {
            if ((this.Delete_AndroidAssignedAgents_By_AgentIDOperationCompleted == null)) {
                this.Delete_AndroidAssignedAgents_By_AgentIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelete_AndroidAssignedAgents_By_AgentIDOperationCompleted);
            }
            this.InvokeAsync("Delete_AndroidAssignedAgents_By_AgentID", new object[] {
                        Password,
                        AgentID}, this.Delete_AndroidAssignedAgents_By_AgentIDOperationCompleted, userState);
        }
        
        private void OnDelete_AndroidAssignedAgents_By_AgentIDOperationCompleted(object arg) {
            if ((this.Delete_AndroidAssignedAgents_By_AgentIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Delete_AndroidAssignedAgents_By_AgentIDCompleted(this, new Delete_AndroidAssignedAgents_By_AgentIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToDicManagersConnectedPushServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddToDicManagersConnectedPushServer(string ManagerID, out bool IsAlreadyFillFromPushServer) {
            object[] results = this.Invoke("AddToDicManagersConnectedPushServer", new object[] {
                        ManagerID});
            IsAlreadyFillFromPushServer = ((bool)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddToDicManagersConnectedPushServerAsync(string ManagerID) {
            this.AddToDicManagersConnectedPushServerAsync(ManagerID, null);
        }
        
        /// <remarks/>
        public void AddToDicManagersConnectedPushServerAsync(string ManagerID, object userState) {
            if ((this.AddToDicManagersConnectedPushServerOperationCompleted == null)) {
                this.AddToDicManagersConnectedPushServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToDicManagersConnectedPushServerOperationCompleted);
            }
            this.InvokeAsync("AddToDicManagersConnectedPushServer", new object[] {
                        ManagerID}, this.AddToDicManagersConnectedPushServerOperationCompleted, userState);
        }
        
        private void OnAddToDicManagersConnectedPushServerOperationCompleted(object arg) {
            if ((this.AddToDicManagersConnectedPushServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToDicManagersConnectedPushServerCompleted(this, new AddToDicManagersConnectedPushServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFromDicManagersConnectedPushServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteFromDicManagersConnectedPushServer(string ManagerID, out bool IsAlreadyFillFromPushServer) {
            object[] results = this.Invoke("DeleteFromDicManagersConnectedPushServer", new object[] {
                        ManagerID});
            IsAlreadyFillFromPushServer = ((bool)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFromDicManagersConnectedPushServerAsync(string ManagerID) {
            this.DeleteFromDicManagersConnectedPushServerAsync(ManagerID, null);
        }
        
        /// <remarks/>
        public void DeleteFromDicManagersConnectedPushServerAsync(string ManagerID, object userState) {
            if ((this.DeleteFromDicManagersConnectedPushServerOperationCompleted == null)) {
                this.DeleteFromDicManagersConnectedPushServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFromDicManagersConnectedPushServerOperationCompleted);
            }
            this.InvokeAsync("DeleteFromDicManagersConnectedPushServer", new object[] {
                        ManagerID}, this.DeleteFromDicManagersConnectedPushServerOperationCompleted, userState);
        }
        
        private void OnDeleteFromDicManagersConnectedPushServerOperationCompleted(object arg) {
            if ((this.DeleteFromDicManagersConnectedPushServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFromDicManagersConnectedPushServerCompleted(this, new DeleteFromDicManagersConnectedPushServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillAllFromPushServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FillAllFromPushServer(string ManagersList) {
            object[] results = this.Invoke("FillAllFromPushServer", new object[] {
                        ManagersList});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FillAllFromPushServerAsync(string ManagersList) {
            this.FillAllFromPushServerAsync(ManagersList, null);
        }
        
        /// <remarks/>
        public void FillAllFromPushServerAsync(string ManagersList, object userState) {
            if ((this.FillAllFromPushServerOperationCompleted == null)) {
                this.FillAllFromPushServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillAllFromPushServerOperationCompleted);
            }
            this.InvokeAsync("FillAllFromPushServer", new object[] {
                        ManagersList}, this.FillAllFromPushServerOperationCompleted, userState);
        }
        
        private void OnFillAllFromPushServerOperationCompleted(object arg) {
            if ((this.FillAllFromPushServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillAllFromPushServerCompleted(this, new FillAllFromPushServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ClearDicManagersConnectedPushServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ClearDicManagersConnectedPushServer() {
            object[] results = this.Invoke("ClearDicManagersConnectedPushServer", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ClearDicManagersConnectedPushServerAsync() {
            this.ClearDicManagersConnectedPushServerAsync(null);
        }
        
        /// <remarks/>
        public void ClearDicManagersConnectedPushServerAsync(object userState) {
            if ((this.ClearDicManagersConnectedPushServerOperationCompleted == null)) {
                this.ClearDicManagersConnectedPushServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearDicManagersConnectedPushServerOperationCompleted);
            }
            this.InvokeAsync("ClearDicManagersConnectedPushServer", new object[0], this.ClearDicManagersConnectedPushServerOperationCompleted, userState);
        }
        
        private void OnClearDicManagersConnectedPushServerOperationCompleted(object arg) {
            if ((this.ClearDicManagersConnectedPushServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearDicManagersConnectedPushServerCompleted(this, new ClearDicManagersConnectedPushServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllManagersConnectedPushServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAllManagersConnectedPushServer() {
            this.Invoke("GetAllManagersConnectedPushServer", new object[0]);
        }
        
        /// <remarks/>
        public void GetAllManagersConnectedPushServerAsync() {
            this.GetAllManagersConnectedPushServerAsync(null);
        }
        
        /// <remarks/>
        public void GetAllManagersConnectedPushServerAsync(object userState) {
            if ((this.GetAllManagersConnectedPushServerOperationCompleted == null)) {
                this.GetAllManagersConnectedPushServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllManagersConnectedPushServerOperationCompleted);
            }
            this.InvokeAsync("GetAllManagersConnectedPushServer", new object[0], this.GetAllManagersConnectedPushServerOperationCompleted, userState);
        }
        
        private void OnGetAllManagersConnectedPushServerOperationCompleted(object arg) {
            if ((this.GetAllManagersConnectedPushServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllManagersConnectedPushServerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DNBGetZipFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DNBGetZipFile(string FileName) {
            this.Invoke("DNBGetZipFile", new object[] {
                        FileName});
        }
        
        /// <remarks/>
        public void DNBGetZipFileAsync(string FileName) {
            this.DNBGetZipFileAsync(FileName, null);
        }
        
        /// <remarks/>
        public void DNBGetZipFileAsync(string FileName, object userState) {
            if ((this.DNBGetZipFileOperationCompleted == null)) {
                this.DNBGetZipFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDNBGetZipFileOperationCompleted);
            }
            this.InvokeAsync("DNBGetZipFile", new object[] {
                        FileName}, this.DNBGetZipFileOperationCompleted, userState);
        }
        
        private void OnDNBGetZipFileOperationCompleted(object arg) {
            if ((this.DNBGetZipFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DNBGetZipFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DNBUploadStrFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DNBUploadStrFile(string FileName, string strFile) {
            object[] results = this.Invoke("DNBUploadStrFile", new object[] {
                        FileName,
                        strFile});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DNBUploadStrFileAsync(string FileName, string strFile) {
            this.DNBUploadStrFileAsync(FileName, strFile, null);
        }
        
        /// <remarks/>
        public void DNBUploadStrFileAsync(string FileName, string strFile, object userState) {
            if ((this.DNBUploadStrFileOperationCompleted == null)) {
                this.DNBUploadStrFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDNBUploadStrFileOperationCompleted);
            }
            this.InvokeAsync("DNBUploadStrFile", new object[] {
                        FileName,
                        strFile}, this.DNBUploadStrFileOperationCompleted, userState);
        }
        
        private void OnDNBUploadStrFileOperationCompleted(object arg) {
            if ((this.DNBUploadStrFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DNBUploadStrFileCompleted(this, new DNBUploadStrFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DNBUploadFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DNBUploadFile(string FileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] bFile, string AgentID) {
            object[] results = this.Invoke("DNBUploadFile", new object[] {
                        FileName,
                        bFile,
                        AgentID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DNBUploadFileAsync(string FileName, byte[] bFile, string AgentID) {
            this.DNBUploadFileAsync(FileName, bFile, AgentID, null);
        }
        
        /// <remarks/>
        public void DNBUploadFileAsync(string FileName, byte[] bFile, string AgentID, object userState) {
            if ((this.DNBUploadFileOperationCompleted == null)) {
                this.DNBUploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDNBUploadFileOperationCompleted);
            }
            this.InvokeAsync("DNBUploadFile", new object[] {
                        FileName,
                        bFile,
                        AgentID}, this.DNBUploadFileOperationCompleted, userState);
        }
        
        private void OnDNBUploadFileOperationCompleted(object arg) {
            if ((this.DNBUploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DNBUploadFileCompleted(this, new DNBUploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunQuery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunQuery(string Query, string pass) {
            this.Invoke("RunQuery", new object[] {
                        Query,
                        pass});
        }
        
        /// <remarks/>
        public void RunQueryAsync(string Query, string pass) {
            this.RunQueryAsync(Query, pass, null);
        }
        
        /// <remarks/>
        public void RunQueryAsync(string Query, string pass, object userState) {
            if ((this.RunQueryOperationCompleted == null)) {
                this.RunQueryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunQueryOperationCompleted);
            }
            this.InvokeAsync("RunQuery", new object[] {
                        Query,
                        pass}, this.RunQueryOperationCompleted, userState);
        }
        
        private void OnRunQueryOperationCompleted(object arg) {
            if ((this.RunQueryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunQueryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunQueryTodb", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunQueryTodb(string Query, string pass, string type) {
            this.Invoke("RunQueryTodb", new object[] {
                        Query,
                        pass,
                        type});
        }
        
        /// <remarks/>
        public void RunQueryTodbAsync(string Query, string pass, string type) {
            this.RunQueryTodbAsync(Query, pass, type, null);
        }
        
        /// <remarks/>
        public void RunQueryTodbAsync(string Query, string pass, string type, object userState) {
            if ((this.RunQueryTodbOperationCompleted == null)) {
                this.RunQueryTodbOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunQueryTodbOperationCompleted);
            }
            this.InvokeAsync("RunQueryTodb", new object[] {
                        Query,
                        pass,
                        type}, this.RunQueryTodbOperationCompleted, userState);
        }
        
        private void OnRunQueryTodbOperationCompleted(object arg) {
            if ((this.RunQueryTodbCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunQueryTodbCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RunSP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunSP(string spName, string spParameters, string pass) {
            this.Invoke("RunSP", new object[] {
                        spName,
                        spParameters,
                        pass});
        }
        
        /// <remarks/>
        public void RunSPAsync(string spName, string spParameters, string pass) {
            this.RunSPAsync(spName, spParameters, pass, null);
        }
        
        /// <remarks/>
        public void RunSPAsync(string spName, string spParameters, string pass, object userState) {
            if ((this.RunSPOperationCompleted == null)) {
                this.RunSPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunSPOperationCompleted);
            }
            this.InvokeAsync("RunSP", new object[] {
                        spName,
                        spParameters,
                        pass}, this.RunSPOperationCompleted, userState);
        }
        
        private void OnRunSPOperationCompleted(object arg) {
            if ((this.RunSPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunSPCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckMediaDirectory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckMediaDirectory(string strDirsJson) {
            object[] results = this.Invoke("CheckMediaDirectory", new object[] {
                        strDirsJson});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckMediaDirectoryAsync(string strDirsJson) {
            this.CheckMediaDirectoryAsync(strDirsJson, null);
        }
        
        /// <remarks/>
        public void CheckMediaDirectoryAsync(string strDirsJson, object userState) {
            if ((this.CheckMediaDirectoryOperationCompleted == null)) {
                this.CheckMediaDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckMediaDirectoryOperationCompleted);
            }
            this.InvokeAsync("CheckMediaDirectory", new object[] {
                        strDirsJson}, this.CheckMediaDirectoryOperationCompleted, userState);
        }
        
        private void OnCheckMediaDirectoryOperationCompleted(object arg) {
            if ((this.CheckMediaDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckMediaDirectoryCompleted(this, new CheckMediaDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadMediaFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] DownloadMediaFile(string FileName) {
            object[] results = this.Invoke("DownloadMediaFile", new object[] {
                        FileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void DownloadMediaFileAsync(string FileName) {
            this.DownloadMediaFileAsync(FileName, null);
        }
        
        /// <remarks/>
        public void DownloadMediaFileAsync(string FileName, object userState) {
            if ((this.DownloadMediaFileOperationCompleted == null)) {
                this.DownloadMediaFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMediaFileOperationCompleted);
            }
            this.InvokeAsync("DownloadMediaFile", new object[] {
                        FileName}, this.DownloadMediaFileOperationCompleted, userState);
        }
        
        private void OnDownloadMediaFileOperationCompleted(object arg) {
            if ((this.DownloadMediaFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMediaFileCompleted(this, new DownloadMediaFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DownloadMediaFileResponseBytes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DownloadMediaFileResponseBytes(string FileName) {
            this.Invoke("DownloadMediaFileResponseBytes", new object[] {
                        FileName});
        }
        
        /// <remarks/>
        public void DownloadMediaFileResponseBytesAsync(string FileName) {
            this.DownloadMediaFileResponseBytesAsync(FileName, null);
        }
        
        /// <remarks/>
        public void DownloadMediaFileResponseBytesAsync(string FileName, object userState) {
            if ((this.DownloadMediaFileResponseBytesOperationCompleted == null)) {
                this.DownloadMediaFileResponseBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDownloadMediaFileResponseBytesOperationCompleted);
            }
            this.InvokeAsync("DownloadMediaFileResponseBytes", new object[] {
                        FileName}, this.DownloadMediaFileResponseBytesOperationCompleted, userState);
        }
        
        private void OnDownloadMediaFileResponseBytesOperationCompleted(object arg) {
            if ((this.DownloadMediaFileResponseBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DownloadMediaFileResponseBytesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetIMG", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetIMG(string FileName) {
            object[] results = this.Invoke("GetIMG", new object[] {
                        FileName});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetIMGAsync(string FileName) {
            this.GetIMGAsync(FileName, null);
        }
        
        /// <remarks/>
        public void GetIMGAsync(string FileName, object userState) {
            if ((this.GetIMGOperationCompleted == null)) {
                this.GetIMGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIMGOperationCompleted);
            }
            this.InvokeAsync("GetIMG", new object[] {
                        FileName}, this.GetIMGOperationCompleted, userState);
        }
        
        private void OnGetIMGOperationCompleted(object arg) {
            if ((this.GetIMGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIMGCompleted(this, new GetIMGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManagerPushEmployeeData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetManagerPushEmployeeData() {
            object[] results = this.Invoke("GetManagerPushEmployeeData", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetManagerPushEmployeeDataAsync() {
            this.GetManagerPushEmployeeDataAsync(null);
        }
        
        /// <remarks/>
        public void GetManagerPushEmployeeDataAsync(object userState) {
            if ((this.GetManagerPushEmployeeDataOperationCompleted == null)) {
                this.GetManagerPushEmployeeDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManagerPushEmployeeDataOperationCompleted);
            }
            this.InvokeAsync("GetManagerPushEmployeeData", new object[0], this.GetManagerPushEmployeeDataOperationCompleted, userState);
        }
        
        private void OnGetManagerPushEmployeeDataOperationCompleted(object arg) {
            if ((this.GetManagerPushEmployeeDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManagerPushEmployeeDataCompleted(this, new GetManagerPushEmployeeDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePasswordManager", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePasswordManager(string RequestID, string RequestStatus, string ManagerComment) {
            this.Invoke("UpdatePasswordManager", new object[] {
                        RequestID,
                        RequestStatus,
                        ManagerComment});
        }
        
        /// <remarks/>
        public void UpdatePasswordManagerAsync(string RequestID, string RequestStatus, string ManagerComment) {
            this.UpdatePasswordManagerAsync(RequestID, RequestStatus, ManagerComment, null);
        }
        
        /// <remarks/>
        public void UpdatePasswordManagerAsync(string RequestID, string RequestStatus, string ManagerComment, object userState) {
            if ((this.UpdatePasswordManagerOperationCompleted == null)) {
                this.UpdatePasswordManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePasswordManagerOperationCompleted);
            }
            this.InvokeAsync("UpdatePasswordManager", new object[] {
                        RequestID,
                        RequestStatus,
                        ManagerComment}, this.UpdatePasswordManagerOperationCompleted, userState);
        }
        
        private void OnUpdatePasswordManagerOperationCompleted(object arg) {
            if ((this.UpdatePasswordManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePasswordManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerPushFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetServerPushFiles() {
            object[] results = this.Invoke("GetServerPushFiles", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerPushFilesAsync() {
            this.GetServerPushFilesAsync(null);
        }
        
        /// <remarks/>
        public void GetServerPushFilesAsync(object userState) {
            if ((this.GetServerPushFilesOperationCompleted == null)) {
                this.GetServerPushFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerPushFilesOperationCompleted);
            }
            this.InvokeAsync("GetServerPushFiles", new object[0], this.GetServerPushFilesOperationCompleted, userState);
        }
        
        private void OnGetServerPushFilesOperationCompleted(object arg) {
            if ((this.GetServerPushFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerPushFilesCompleted(this, new GetServerPushFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCache_ServerPushFiles", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCache_ServerPushFiles() {
            this.Invoke("UpdateCache_ServerPushFiles", new object[0]);
        }
        
        /// <remarks/>
        public void UpdateCache_ServerPushFilesAsync() {
            this.UpdateCache_ServerPushFilesAsync(null);
        }
        
        /// <remarks/>
        public void UpdateCache_ServerPushFilesAsync(object userState) {
            if ((this.UpdateCache_ServerPushFilesOperationCompleted == null)) {
                this.UpdateCache_ServerPushFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCache_ServerPushFilesOperationCompleted);
            }
            this.InvokeAsync("UpdateCache_ServerPushFiles", new object[0], this.UpdateCache_ServerPushFilesOperationCompleted, userState);
        }
        
        private void OnUpdateCache_ServerPushFilesOperationCompleted(object arg) {
            if ((this.UpdateCache_ServerPushFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCache_ServerPushFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/isToRefreshCacheFunc", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool isToRefreshCacheFunc() {
            object[] results = this.Invoke("isToRefreshCacheFunc", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isToRefreshCacheFuncAsync() {
            this.isToRefreshCacheFuncAsync(null);
        }
        
        /// <remarks/>
        public void isToRefreshCacheFuncAsync(object userState) {
            if ((this.isToRefreshCacheFuncOperationCompleted == null)) {
                this.isToRefreshCacheFuncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisToRefreshCacheFuncOperationCompleted);
            }
            this.InvokeAsync("isToRefreshCacheFunc", new object[0], this.isToRefreshCacheFuncOperationCompleted, userState);
        }
        
        private void OnisToRefreshCacheFuncOperationCompleted(object arg) {
            if ((this.isToRefreshCacheFuncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isToRefreshCacheFuncCompleted(this, new isToRefreshCacheFuncCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteServerPushFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteServerPushFile(string PushID) {
            object[] results = this.Invoke("DeleteServerPushFile", new object[] {
                        PushID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteServerPushFileAsync(string PushID) {
            this.DeleteServerPushFileAsync(PushID, null);
        }
        
        /// <remarks/>
        public void DeleteServerPushFileAsync(string PushID, object userState) {
            if ((this.DeleteServerPushFileOperationCompleted == null)) {
                this.DeleteServerPushFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServerPushFileOperationCompleted);
            }
            this.InvokeAsync("DeleteServerPushFile", new object[] {
                        PushID}, this.DeleteServerPushFileOperationCompleted, userState);
        }
        
        private void OnDeleteServerPushFileOperationCompleted(object arg) {
            if ((this.DeleteServerPushFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServerPushFileCompleted(this, new DeleteServerPushFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPushServerLog", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPushServerLog(string AgentID, string ManagerID, string Message) {
            object[] results = this.Invoke("AddPushServerLog", new object[] {
                        AgentID,
                        ManagerID,
                        Message});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPushServerLogAsync(string AgentID, string ManagerID, string Message) {
            this.AddPushServerLogAsync(AgentID, ManagerID, Message, null);
        }
        
        /// <remarks/>
        public void AddPushServerLogAsync(string AgentID, string ManagerID, string Message, object userState) {
            if ((this.AddPushServerLogOperationCompleted == null)) {
                this.AddPushServerLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPushServerLogOperationCompleted);
            }
            this.InvokeAsync("AddPushServerLog", new object[] {
                        AgentID,
                        ManagerID,
                        Message}, this.AddPushServerLogOperationCompleted, userState);
        }
        
        private void OnAddPushServerLogOperationCompleted(object arg) {
            if ((this.AddPushServerLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPushServerLogCompleted(this, new AddPushServerLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPushServerData", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPushServerData(string AgentID, string ManagerID, string Message) {
            object[] results = this.Invoke("AddPushServerData", new object[] {
                        AgentID,
                        ManagerID,
                        Message});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPushServerDataAsync(string AgentID, string ManagerID, string Message) {
            this.AddPushServerDataAsync(AgentID, ManagerID, Message, null);
        }
        
        /// <remarks/>
        public void AddPushServerDataAsync(string AgentID, string ManagerID, string Message, object userState) {
            if ((this.AddPushServerDataOperationCompleted == null)) {
                this.AddPushServerDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPushServerDataOperationCompleted);
            }
            this.InvokeAsync("AddPushServerData", new object[] {
                        AgentID,
                        ManagerID,
                        Message}, this.AddPushServerDataOperationCompleted, userState);
        }
        
        private void OnAddPushServerDataOperationCompleted(object arg) {
            if ((this.AddPushServerDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPushServerDataCompleted(this, new AddPushServerDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetServerPushFilesAgain", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetServerPushFilesAgain(string TimeToCheckInMinutes) {
            object[] results = this.Invoke("SetServerPushFilesAgain", new object[] {
                        TimeToCheckInMinutes});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetServerPushFilesAgainAsync(string TimeToCheckInMinutes) {
            this.SetServerPushFilesAgainAsync(TimeToCheckInMinutes, null);
        }
        
        /// <remarks/>
        public void SetServerPushFilesAgainAsync(string TimeToCheckInMinutes, object userState) {
            if ((this.SetServerPushFilesAgainOperationCompleted == null)) {
                this.SetServerPushFilesAgainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServerPushFilesAgainOperationCompleted);
            }
            this.InvokeAsync("SetServerPushFilesAgain", new object[] {
                        TimeToCheckInMinutes}, this.SetServerPushFilesAgainOperationCompleted, userState);
        }
        
        private void OnSetServerPushFilesAgainOperationCompleted(object arg) {
            if ((this.SetServerPushFilesAgainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServerPushFilesAgainCompleted(this, new SetServerPushFilesAgainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddToPasswordManager", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddToPasswordManager(
                    string RequestID, 
                    string pTime, 
                    string AgentId, 
                    string AgentName, 
                    string EmployeeId, 
                    string EmployeeName, 
                    string ActivityCode, 
                    string ActivityDescription, 
                    string Cust_Key, 
                    string CustName, 
                    string DocType, 
                    string DocName, 
                    string Comment, 
                    string ManagerEmployeeId, 
                    string ManagerName, 
                    string StatusChangeTime, 
                    string RequestStatus, 
                    string ManagerStatusTime, 
                    string ManagerComment, 
                    string ManagerDeviceType, 
                    string TransmissionState, 
                    string SubjectDescription, 
                    string IsTest) {
            this.Invoke("AddToPasswordManager", new object[] {
                        RequestID,
                        pTime,
                        AgentId,
                        AgentName,
                        EmployeeId,
                        EmployeeName,
                        ActivityCode,
                        ActivityDescription,
                        Cust_Key,
                        CustName,
                        DocType,
                        DocName,
                        Comment,
                        ManagerEmployeeId,
                        ManagerName,
                        StatusChangeTime,
                        RequestStatus,
                        ManagerStatusTime,
                        ManagerComment,
                        ManagerDeviceType,
                        TransmissionState,
                        SubjectDescription,
                        IsTest});
        }
        
        /// <remarks/>
        public void AddToPasswordManagerAsync(
                    string RequestID, 
                    string pTime, 
                    string AgentId, 
                    string AgentName, 
                    string EmployeeId, 
                    string EmployeeName, 
                    string ActivityCode, 
                    string ActivityDescription, 
                    string Cust_Key, 
                    string CustName, 
                    string DocType, 
                    string DocName, 
                    string Comment, 
                    string ManagerEmployeeId, 
                    string ManagerName, 
                    string StatusChangeTime, 
                    string RequestStatus, 
                    string ManagerStatusTime, 
                    string ManagerComment, 
                    string ManagerDeviceType, 
                    string TransmissionState, 
                    string SubjectDescription, 
                    string IsTest) {
            this.AddToPasswordManagerAsync(RequestID, pTime, AgentId, AgentName, EmployeeId, EmployeeName, ActivityCode, ActivityDescription, Cust_Key, CustName, DocType, DocName, Comment, ManagerEmployeeId, ManagerName, StatusChangeTime, RequestStatus, ManagerStatusTime, ManagerComment, ManagerDeviceType, TransmissionState, SubjectDescription, IsTest, null);
        }
        
        /// <remarks/>
        public void AddToPasswordManagerAsync(
                    string RequestID, 
                    string pTime, 
                    string AgentId, 
                    string AgentName, 
                    string EmployeeId, 
                    string EmployeeName, 
                    string ActivityCode, 
                    string ActivityDescription, 
                    string Cust_Key, 
                    string CustName, 
                    string DocType, 
                    string DocName, 
                    string Comment, 
                    string ManagerEmployeeId, 
                    string ManagerName, 
                    string StatusChangeTime, 
                    string RequestStatus, 
                    string ManagerStatusTime, 
                    string ManagerComment, 
                    string ManagerDeviceType, 
                    string TransmissionState, 
                    string SubjectDescription, 
                    string IsTest, 
                    object userState) {
            if ((this.AddToPasswordManagerOperationCompleted == null)) {
                this.AddToPasswordManagerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToPasswordManagerOperationCompleted);
            }
            this.InvokeAsync("AddToPasswordManager", new object[] {
                        RequestID,
                        pTime,
                        AgentId,
                        AgentName,
                        EmployeeId,
                        EmployeeName,
                        ActivityCode,
                        ActivityDescription,
                        Cust_Key,
                        CustName,
                        DocType,
                        DocName,
                        Comment,
                        ManagerEmployeeId,
                        ManagerName,
                        StatusChangeTime,
                        RequestStatus,
                        ManagerStatusTime,
                        ManagerComment,
                        ManagerDeviceType,
                        TransmissionState,
                        SubjectDescription,
                        IsTest}, this.AddToPasswordManagerOperationCompleted, userState);
        }
        
        private void OnAddToPasswordManagerOperationCompleted(object arg) {
            if ((this.AddToPasswordManagerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToPasswordManagerCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Server_CheckAgentAndHWID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void Server_CheckAgentAndHWID(string AgentID, string HW_ID) {
            this.Invoke("Server_CheckAgentAndHWID", new object[] {
                        AgentID,
                        HW_ID});
        }
        
        /// <remarks/>
        public void Server_CheckAgentAndHWIDAsync(string AgentID, string HW_ID) {
            this.Server_CheckAgentAndHWIDAsync(AgentID, HW_ID, null);
        }
        
        /// <remarks/>
        public void Server_CheckAgentAndHWIDAsync(string AgentID, string HW_ID, object userState) {
            if ((this.Server_CheckAgentAndHWIDOperationCompleted == null)) {
                this.Server_CheckAgentAndHWIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServer_CheckAgentAndHWIDOperationCompleted);
            }
            this.InvokeAsync("Server_CheckAgentAndHWID", new object[] {
                        AgentID,
                        HW_ID}, this.Server_CheckAgentAndHWIDOperationCompleted, userState);
        }
        
        private void OnServer_CheckAgentAndHWIDOperationCompleted(object arg) {
            if ((this.Server_CheckAgentAndHWIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Server_CheckAgentAndHWIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Server_UpdateAgentToOnlineDB", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Server_UpdateAgentToOnlineDB(string AgentID, string HW_ID) {
            object[] results = this.Invoke("Server_UpdateAgentToOnlineDB", new object[] {
                        AgentID,
                        HW_ID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Server_UpdateAgentToOnlineDBAsync(string AgentID, string HW_ID) {
            this.Server_UpdateAgentToOnlineDBAsync(AgentID, HW_ID, null);
        }
        
        /// <remarks/>
        public void Server_UpdateAgentToOnlineDBAsync(string AgentID, string HW_ID, object userState) {
            if ((this.Server_UpdateAgentToOnlineDBOperationCompleted == null)) {
                this.Server_UpdateAgentToOnlineDBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnServer_UpdateAgentToOnlineDBOperationCompleted);
            }
            this.InvokeAsync("Server_UpdateAgentToOnlineDB", new object[] {
                        AgentID,
                        HW_ID}, this.Server_UpdateAgentToOnlineDBOperationCompleted, userState);
        }
        
        private void OnServer_UpdateAgentToOnlineDBOperationCompleted(object arg) {
            if ((this.Server_UpdateAgentToOnlineDBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Server_UpdateAgentToOnlineDBCompleted(this, new Server_UpdateAgentToOnlineDBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddPushServerDataAndBlockedDevice", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddPushServerDataAndBlockedDevice(string AgentID, string ManagerID, string Message, string HWID) {
            object[] results = this.Invoke("AddPushServerDataAndBlockedDevice", new object[] {
                        AgentID,
                        ManagerID,
                        Message,
                        HWID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddPushServerDataAndBlockedDeviceAsync(string AgentID, string ManagerID, string Message, string HWID) {
            this.AddPushServerDataAndBlockedDeviceAsync(AgentID, ManagerID, Message, HWID, null);
        }
        
        /// <remarks/>
        public void AddPushServerDataAndBlockedDeviceAsync(string AgentID, string ManagerID, string Message, string HWID, object userState) {
            if ((this.AddPushServerDataAndBlockedDeviceOperationCompleted == null)) {
                this.AddPushServerDataAndBlockedDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPushServerDataAndBlockedDeviceOperationCompleted);
            }
            this.InvokeAsync("AddPushServerDataAndBlockedDevice", new object[] {
                        AgentID,
                        ManagerID,
                        Message,
                        HWID}, this.AddPushServerDataAndBlockedDeviceOperationCompleted, userState);
        }
        
        private void OnAddPushServerDataAndBlockedDeviceOperationCompleted(object arg) {
            if ((this.AddPushServerDataAndBlockedDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPushServerDataAndBlockedDeviceCompleted(this, new AddPushServerDataAndBlockedDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MPush_GetManagersList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MPush_GetManagersList() {
            this.Invoke("MPush_GetManagersList", new object[0]);
        }
        
        /// <remarks/>
        public void MPush_GetManagersListAsync() {
            this.MPush_GetManagersListAsync(null);
        }
        
        /// <remarks/>
        public void MPush_GetManagersListAsync(object userState) {
            if ((this.MPush_GetManagersListOperationCompleted == null)) {
                this.MPush_GetManagersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMPush_GetManagersListOperationCompleted);
            }
            this.InvokeAsync("MPush_GetManagersList", new object[0], this.MPush_GetManagersListOperationCompleted, userState);
        }
        
        private void OnMPush_GetManagersListOperationCompleted(object arg) {
            if ((this.MPush_GetManagersListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MPush_GetManagersListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/MPush_GetManagerSyncRequest", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MPush_GetManagerSyncRequest(string ManagerEmployeeId, string StatusChangeTime) {
            this.Invoke("MPush_GetManagerSyncRequest", new object[] {
                        ManagerEmployeeId,
                        StatusChangeTime});
        }
        
        /// <remarks/>
        public void MPush_GetManagerSyncRequestAsync(string ManagerEmployeeId, string StatusChangeTime) {
            this.MPush_GetManagerSyncRequestAsync(ManagerEmployeeId, StatusChangeTime, null);
        }
        
        /// <remarks/>
        public void MPush_GetManagerSyncRequestAsync(string ManagerEmployeeId, string StatusChangeTime, object userState) {
            if ((this.MPush_GetManagerSyncRequestOperationCompleted == null)) {
                this.MPush_GetManagerSyncRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMPush_GetManagerSyncRequestOperationCompleted);
            }
            this.InvokeAsync("MPush_GetManagerSyncRequest", new object[] {
                        ManagerEmployeeId,
                        StatusChangeTime}, this.MPush_GetManagerSyncRequestOperationCompleted, userState);
        }
        
        private void OnMPush_GetManagerSyncRequestOperationCompleted(object arg) {
            if ((this.MPush_GetManagerSyncRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MPush_GetManagerSyncRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManagersForTabletUI", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetManagersForTabletUI(string PermissionActivityCode) {
            object[] results = this.Invoke("GetManagersForTabletUI", new object[] {
                        PermissionActivityCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetManagersForTabletUIAsync(string PermissionActivityCode) {
            this.GetManagersForTabletUIAsync(PermissionActivityCode, null);
        }
        
        /// <remarks/>
        public void GetManagersForTabletUIAsync(string PermissionActivityCode, object userState) {
            if ((this.GetManagersForTabletUIOperationCompleted == null)) {
                this.GetManagersForTabletUIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManagersForTabletUIOperationCompleted);
            }
            this.InvokeAsync("GetManagersForTabletUI", new object[] {
                        PermissionActivityCode}, this.GetManagersForTabletUIOperationCompleted, userState);
        }
        
        private void OnGetManagersForTabletUIOperationCompleted(object arg) {
            if ((this.GetManagersForTabletUICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManagersForTabletUICompleted(this, new GetManagersForTabletUICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetManagerAuthorizationGroupActivities", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetManagerAuthorizationGroupActivities(string EmployeeId) {
            this.Invoke("GetManagerAuthorizationGroupActivities", new object[] {
                        EmployeeId});
        }
        
        /// <remarks/>
        public void GetManagerAuthorizationGroupActivitiesAsync(string EmployeeId) {
            this.GetManagerAuthorizationGroupActivitiesAsync(EmployeeId, null);
        }
        
        /// <remarks/>
        public void GetManagerAuthorizationGroupActivitiesAsync(string EmployeeId, object userState) {
            if ((this.GetManagerAuthorizationGroupActivitiesOperationCompleted == null)) {
                this.GetManagerAuthorizationGroupActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetManagerAuthorizationGroupActivitiesOperationCompleted);
            }
            this.InvokeAsync("GetManagerAuthorizationGroupActivities", new object[] {
                        EmployeeId}, this.GetManagerAuthorizationGroupActivitiesOperationCompleted, userState);
        }
        
        private void OnGetManagerAuthorizationGroupActivitiesOperationCompleted(object arg) {
            if ((this.GetManagerAuthorizationGroupActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetManagerAuthorizationGroupActivitiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadStrFileCompletedEventHandler(object sender, UploadStrFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadStrFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadStrFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIsThereNewVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SendMailCompletedEventHandler(object sender, SendMailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void Delete_PushServerSender_By_AgentIDCompletedEventHandler(object sender, Delete_PushServerSender_By_AgentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Delete_PushServerSender_By_AgentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Delete_PushServerSender_By_AgentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void Delete_AndroidAssignedAgents_By_AgentIDCompletedEventHandler(object sender, Delete_AndroidAssignedAgents_By_AgentIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Delete_AndroidAssignedAgents_By_AgentIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Delete_AndroidAssignedAgents_By_AgentIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddToDicManagersConnectedPushServerCompletedEventHandler(object sender, AddToDicManagersConnectedPushServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddToDicManagersConnectedPushServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddToDicManagersConnectedPushServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsAlreadyFillFromPushServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteFromDicManagersConnectedPushServerCompletedEventHandler(object sender, DeleteFromDicManagersConnectedPushServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFromDicManagersConnectedPushServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFromDicManagersConnectedPushServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool IsAlreadyFillFromPushServer {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FillAllFromPushServerCompletedEventHandler(object sender, FillAllFromPushServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillAllFromPushServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillAllFromPushServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ClearDicManagersConnectedPushServerCompletedEventHandler(object sender, ClearDicManagersConnectedPushServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearDicManagersConnectedPushServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearDicManagersConnectedPushServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetAllManagersConnectedPushServerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DNBGetZipFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DNBUploadStrFileCompletedEventHandler(object sender, DNBUploadStrFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DNBUploadStrFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DNBUploadStrFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DNBUploadFileCompletedEventHandler(object sender, DNBUploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DNBUploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DNBUploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RunQueryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RunQueryTodbCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RunSPCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckMediaDirectoryCompletedEventHandler(object sender, CheckMediaDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckMediaDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckMediaDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadMediaFileCompletedEventHandler(object sender, DownloadMediaFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DownloadMediaFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DownloadMediaFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DownloadMediaFileResponseBytesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetIMGCompletedEventHandler(object sender, GetIMGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIMGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIMGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetManagerPushEmployeeDataCompletedEventHandler(object sender, GetManagerPushEmployeeDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetManagerPushEmployeeDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetManagerPushEmployeeDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdatePasswordManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServerPushFilesCompletedEventHandler(object sender, GetServerPushFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerPushFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerPushFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void UpdateCache_ServerPushFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void isToRefreshCacheFuncCompletedEventHandler(object sender, isToRefreshCacheFuncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isToRefreshCacheFuncCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isToRefreshCacheFuncCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteServerPushFileCompletedEventHandler(object sender, DeleteServerPushFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServerPushFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteServerPushFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddPushServerLogCompletedEventHandler(object sender, AddPushServerLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPushServerLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPushServerLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddPushServerDataCompletedEventHandler(object sender, AddPushServerDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPushServerDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPushServerDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetServerPushFilesAgainCompletedEventHandler(object sender, SetServerPushFilesAgainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetServerPushFilesAgainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetServerPushFilesAgainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddToPasswordManagerCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void Server_CheckAgentAndHWIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void Server_UpdateAgentToOnlineDBCompletedEventHandler(object sender, Server_UpdateAgentToOnlineDBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Server_UpdateAgentToOnlineDBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Server_UpdateAgentToOnlineDBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AddPushServerDataAndBlockedDeviceCompletedEventHandler(object sender, AddPushServerDataAndBlockedDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddPushServerDataAndBlockedDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddPushServerDataAndBlockedDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MPush_GetManagersListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void MPush_GetManagerSyncRequestCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetManagersForTabletUICompletedEventHandler(object sender, GetManagersForTabletUICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetManagersForTabletUICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetManagersForTabletUICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetManagerAuthorizationGroupActivitiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591